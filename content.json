[{"title":"React Navigation 集成 Redux","date":"2017-12-07T13:54:53.000Z","path":"posts/9aae91d8.html","text":"更新时间：2018-03-03 修复因 React Navigation 更新引起的 addListener is not a function 的问题。 react-navigation 是 React Native 官方推荐的导航库。redux 是一个状态容器，redux 的简单使用可参考阮一峰的 Redux 入门教程，现在网上也有很多中文文档。 在 React Navigation 最新版本中需要添加 react-navigation-redux-helpers 包12$ yarn add react-native-navigation-redux-helpers# 或者 npm install --save react-native-navigation-redux-helpers 首先写 redux helper 工具 redux.js1234567891011121314import &#123; createReactNavigationReduxMiddleware, createReduxBoundAddListener&#125; from 'react-navigation-redux-helpers';// 注意: createReactNavigationReduxMiddleware 必须在 createReduxBoundAddListener 之前执行const middleware = createReactNavigationReduxMiddleware('root', state =&gt; state.nav,);const addListener = createReduxBoundAddListener('root');export &#123; middleware, addListener&#125;; 首先写一个 navigator1234export const AppNavigator = StackNavigator(&#123; Home: &#123; screen: HomeTab &#125;, // 这是一个 TabNavigator Details: &#123; screen: DetailPage &#125;, // 简单的页面 &#125;); 集成 Redux 主要含三部分：Store，Action，Reducer Action12345678910111213export function getBanners() &#123; return dispatch =&gt; &#123; // request 是我自己封装的网络请求方法 request(&#123; url: apis.BANNER // 常量 API 地址 &#125;).then(res =&gt; &#123; dispatch(&#123; type: actionTypes.BANNER, // 常量行为类型 data: res &#125;) &#125;) &#125;&#125; Reducer othersReducer.js 123456789101112131415// 初始 stateconst initState = &#123; banners: [], articles: [], loading: false&#125;export default function discoveryData(state=initState, action) &#123; switch(action.type) &#123; case actionTypes.BANNER: return &#123;...state, banners:action.data, loading:false&#125; default: return state; &#125;&#125; navReducer.js 用于导航 1234567891011121314import &#123; AppNavigator &#125; from '../navigators/AppNavigator';import &#123; NavigationActions &#125; from 'react-navigation';// Home 是个 TabNavigator，在这里 firstAction 为 null，会导致后续程序会出错，所以自己手写了一个 actionconst firstAction = AppNavigator.router.getActionForPathAndParams('Home') || &#123; type: 'Navigation/NAVIGATE', touteName: 'Home'&#125;;const initialNavState = AppNavigator.router.getStateForAction(firstAction);const navReducer = (state = initialNavState, action) =&gt; &#123; const nextState = AppNavigator.router.getStateForAction(action, state); return nextState || state;&#125;export default navReducer; 在以前版本里，我是把 firstAction 和 initialNavState 注释掉了，如果不注释掉会在 getStateForAction 时报 undefined 错误解决方案多种：一种是将 TabNavigator 放在单纯的 Component 中作为 StackNavigator 的 screen，这样就可以使用 initialNavState了，弊端是不方便从其它页面跳转到 TabNavigator 的指定 Tab 页。另一种就是我现在使用的方案了。如果你有更好的解决方案请告诉我！！ 在新版本中不再出现上述问题，而是出现代码中提到的 null 问题 整合 Reducer12345678910import &#123; combineReducers &#125; from 'redux';import navReducer from './navReducer';import othersReducer from './othersReducer';const AppReducer = combineReducers(&#123; nav: navReducer, othersReducer&#125;);export default AppReducer; 配置 Store12345678import &#123; createStore, applyMiddleware &#125; from 'redux';import thunkMiddleware from 'redux-thunk'; // 中间件import reducers from './../reducers'; // 整合后的 Reducerimport &#123; middleware &#125; from './redux'; // redux helperconst configStore = applyMiddleware(thunkMiddleware, middleware)(createStore)export default configStore(reducers); 自定义 Navigator1234567891011121314151617181920212223242526272829303132333435363738import &#123; connect &#125; from 'react-redux';import &#123; addNavigationHelpers, NavigationActions &#125; from 'react-navigation';import &#123; addListener &#125; from './redux';class AppWithNavigationState extends Component &#123; componentDidMount() &#123; BackHandler.addEventListener('hardwareBackPress', this.onBackPress) &#125; componentWillUnmount() &#123; BackHandler.removeEventListener('hardwareBackPress', this.onBackPress) &#125; onBackPress = () =&gt; &#123; const &#123; dispatch, nav &#125; = this.props; dispatch(NavigationActions.back()) return !(nav.index===0) &#125; render() &#123; return ( &lt;AppNavigator navigation=&#123;addNavigationHelpers(&#123; dispatch: this.props.dispatch, state: this.props.nav, addListener // 关键所在 &#125;)&#125; /&gt; ) &#125;&#125;const mapStateToProps = state =&gt; (&#123; nav: state.nav,&#125;);export default connect(mapStateToProps)(AppWithNavigationState); 绑定到应用中在入口文件中绑定 Redux 的 store 管理库123456789101112import &#123; Provider &#125; from 'react-redux';import store from './src/store';export default class App extends React.Component &#123; render() &#123; return ( &lt;Provider store=&#123;store&#125;&gt; &lt;AppWithNavigationState /&gt; &lt;/Provider&gt; ); &#125;&#125; 所有源码我已经放到了 GitHub 查看源码","tags":[{"name":"React Native","slug":"React-Native","permalink":"http://www.hongye567.top/tags/React-Native/"},{"name":"redux","slug":"redux","permalink":"http://www.hongye567.top/tags/redux/"}]},{"title":"React Native 集成极光推送 jpush-react-native","date":"2017-06-22T13:35:43.000Z","path":"posts/9437166e.html","text":"概述jpush-react-native 是极光推送官方开发的 React Native 版本插件，可以快速集成推送功能。现在最新版本的 JPush SDK 分离了 JPush 及 JCore，让开发者可以分开集成 JMessage 及 JPush（以前 JMessage 包含了 JPush）。 我没有 mac 设备，所以只说 Android 的配置。 安装打开终端，进入项目文件夹，执行以下命令： 123$ npm install jpush-react-native --save# jpush-react-native 1.4.2 版本以后需要同时安装 jcore-react-native$ npm install jcore-react-native --save 配置1. 自动配置部分官方： 1$ react-native link 作者推荐：123# 针对性的link，避免之前手动配置的其它插件重复配置造成报错$ react-native link jpush-react-native$ react-native link jcore-react-native 执行完 link 项目后可能会出现报错，这没关系，需要手动配置一下 build.gradle 文件。 2. 手动配置部分在 Android Studio 中打开你的项目，然后找到 app 或者你自己定义的需要集成 jpush-react-native 的模块，打开此模块下的 build.gradle 文件，做以下改动： project/android/app/build.gradle 123456789101112131415161718android &#123; ... defaultConfig &#123; applicationId \"yourApplicationId\" // 此处改成你在极光官网上申请应用时填写的包名 ... manifestPlaceholders = [ JPUSH_APPKEY: \"yourAppKey\", //在此替换你的 APPKey APP_CHANNEL: \"developer-default\" //应用渠道号, 默认即可 ] &#125;&#125;...dependencies &#123; compile fileTree(dir: \"libs\", include: [\"*.jar\"]) compile project(':jpush-react-native') // 添加 jpush 依赖 compile project(':jcore-react-native') // 添加 jcore 依赖 compile \"com.facebook.react:react-native:+\" // From node_modules&#125; 检查 android 项目下的 settings.gradle 配置有没有包含以下内容： project/android/settings.gradle 123include ':app', ':jpush-react-native', ':jcore-react-native'project(':jpush-react-native').projectDir = new File(rootProject.projectDir, '../node_modules/jpush-react-native/android')project(':jcore-react-native').projectDir = new File(rootProject.projectDir, '../node_modules/jcore-react-native/android') 检查一下 app 下的 AndroidManifest 配置，有没有增加 \\ 部分。 project/android/app/AndroidManifest.xml 1234567&lt;application ... &lt;!-- Required . Enable it you can get statistics data with channel --&gt; &lt;meta-data android:name=\"JPUSH_CHANNEL\" android:value=\"$&#123;APP_CHANNEL&#125;\"/&gt; &lt;meta-data android:name=\"JPUSH_APPKEY\" android:value=\"$&#123;JPUSH_APPKEY&#125;\"/&gt;&lt;/application&gt; 现在重新 sync 一下项目，应该能看到 jpush-react-native 以及 jcore-react-native 作为 android Library 项目导进来了。 接下来加入 JPushPackage RN 0.29.0 以下版本 打开 app 下的 MainActivity，在 ReactInstanceManager 的 build 方法中加入 JPushPackage： project/android/app/MainActivity.java RN 0.29.0 以上版本 打开 app 下的 MainApplication.java 文件，然后加入 JPushPackage，参考 demo： 1234567891011121314151617181920// 设置为 true 将不弹出 toastprivate boolean SHUTDOWN_TOAST = false;// 设置为 true 将不打印 logprivate boolean SHUTDOWN_LOG = false;private final ReactNativeHost mReactNativeHost = new ReactNativeHost(this) &#123; @Override protected boolean getUseDeveloperSupport() &#123; return BuildConfig.DEBUG; &#125; @Override protected List&lt;ReactPackage&gt; getPackages() &#123; return Arrays.&lt;ReactPackage&gt;asList( new MainReactPackage(), new JPushPackage(SHUTDOWN_TOAST, SHUTDOWN_LOG) ); &#125;&#125;; 然后在 MainActivity 中加入一些初始化代码即可： project/android/app/src/java/…/MainActivity.java 1234567891011121314151617181920212223242526public class MainActivity extends ReactActivity &#123; ... @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); JPushInterface.init(this); &#125; @Override protected void onPause() &#123; super.onPause(); JPushInterface.onPause(this); &#125; @Override protected void onResume() &#123; super.onResume(); JPushInterface.onResume(this); &#125; @Override protected void onDestroy() &#123; super.onDestroy(); &#125;&#125; 这样就完成了所有的配置。接下来就可以在 JS 中调用插件提供的 API 了。 使用12345678910111213141516171819202122232425262728293031import JPushModule from 'jpush-react-native';...componentDidMount() &#123; // 新版本必需写回调函数 // JPushModule.notifyJSDidLoad(); JPushModule.notifyJSDidLoad((resultCode) =&gt; &#123; if (resultCode === 0) &#123;&#125; &#125;); // 接收自定义消息 JPushModule.addReceiveCustomMsgListener((message) =&gt; &#123; this.setState(&#123;pushMsg: message&#125;); &#125;); // 接收推送通知 JPushModule.addReceiveNotificationListener((message) =&gt; &#123; console.log(\"receive notification: \" + message); &#125;); // 打开通知 JPushModule.addReceiveOpenNotificationListener((map) =&gt; &#123; console.log(\"Opening notification!\"); console.log(\"map.extra: \" + map.extras); // 可执行跳转操作，也可跳转原生页面 // this.props.navigation.navigate(\"SecondActivity\"); &#125;); &#125; componentWillUnmount() &#123; JPushModule.removeReceiveCustomMsgListener(); JPushModule.removeReceiveNotificationListener(); &#125; 更多高级应用查看官方说明","tags":[{"name":"React Native","slug":"React-Native","permalink":"http://www.hongye567.top/tags/React-Native/"}]},{"title":"《成功者战胜100个弱点》","date":"2017-06-10T10:25:25.000Z","path":"posts/f0c4d7aa.html","text":"《成功者战胜100个弱点》作者：奚华出版时间：2004/01目录： 第一章 勇于奋斗赢得世界黄金法则你该拥有成功、财富、幸福等这些人生最为稀缺的资源——没有人天生注定要过平庸和贫穷的生活。为你的渴望而奋斗，体现着人生的最大的意义。 第1弱点 人生最可怕的是处于盲目状态第2弱点 没有理想和抱负是悲剧人生第3弱点 人摆错了位置就是垃圾第4弱点 人要出头不可强出第5弱点 不要把希望寄托在别人身上第6弱点 做人不要太空虚第7弱点 不争官要权第8弱点 对苛刻的金钱诱惑要敢于说“不”第9弱点 赚了钱不要太张扬第10弱点 有钱并不等于幸福第11弱点 不要抱怨自己命不好第12弱点 绝对要扔掉别人的拐杖第13弱点 千万别祈求处处保险第14弱点 草率行事只会漏洞百出第15弱点 力戒包裹自己的错误第二章 解开心灵枷锁战胜自我失败者总会顾及别人的想法。他会恐惧环境和压力，会抱怨客观的原因；他们动辄想到失败的危险，因而永远不愿去真正地关注自己、不愿去善待自己，失败者是失去心灵自由的奴隶。 第16弱点 不要为小事烦恼第17弱点 无谓的争论都是浪费精力第18弱点 别悲观地接受你不满意的东西第19弱点 放眼未来切忌缩手缩脚第20弱点 解除贪婪的枷锁第21弱点 不要搬石头砸自己的脚第22弱点 别做没有应变能力的“毛毛虫”第23弱点 切忌涉足太多的领域第24弱点 拖拖拉拉是人性中最大的弱点第25弱点 小不忍则乱大谋第26弱点 处事不要太认真第27弱点 不挡别人的财路第28弱点 不要坐享其成第29弱点 力戒眉毛胡子一把抓第30弱点 不要整天问别人对你的看法第31弱点 切忌让坏习惯缠身第32弱点 别老闷闷不乐第33弱点 别为自己的失败找借口第34弱点 放弃“一言堂”的谈话方式第35弱点 当断不断反受其乱第36弱点 别让失望左右你的生活第三章 选择职业驱散事业迷津如果说就业只是为了生存，那么创业就是追求人生成功，它是在更高层次上实现人的内在需要和价值。创业不仅需要天时、地利、人和，还需要一种积极的心态和积极的思维。 第37弱点 选择好职业，摒弃坏职业第38弱点 不要把报酬当作职业的第一选择第39弱点 千万别入错行第40弱点 别在工作上被人看不起第41弱点 别轻易“跳槽”第42弱点 不要抱怨工资太低第43弱点 不要绝对相信素质测评第44弱点 不停地换工作并不是好现象第45弱点 打报告不要越级第46弱点 不把工作带回家第47弱点 不要让自己成为不停旋转的陀螺第48弱点 没有兴趣的事不要碰第49弱点 不要有怀才不遇的想法第50弱点 不要当众辱骂你的上司第51弱点 不碰职场的10大雷区第52弱点 不应该犯的职场错误第53弱点 办公室的无形禁忌第四章 积极上进修炼不良的习惯良好的习惯是你一生中最宝贵的财富，一个习惯养成一种品格，一种品格决定一种命运。习惯可以助人成功，也可以促人失败。好的习惯是成功的捷径，坏的习惯却将人带入迷途，远离成功目标。养成一种良好的习惯，你在事业之路上将无往而不胜。 第54弱点 不以现有成就满足第55弱点 一失足千古恨，人生没有后悔药第56弱点 不要做虚无的破坏者第57弱点 不要被嫉妒心控制自己第58弱点 权利不等于安全感第59弱点 做事切忌半途而废第60弱点 不要忍者痛苦求节俭第61弱点 不要入不敷出第五章 提高婚姻质量的巩固家庭燕妮曾直截了当地说：“婚姻就是爱情。”这表明，婚姻并非爱情地坟墓，只要夫妻双方正确处理好婚姻关系，调适好结婚心理，婚姻和爱情一样，会成为事业的推进器化催化剂，成为家庭生活幸福的源泉。 第62弱点 决不把恋爱视作游戏第63弱点 唠叨为婚姻挖掘坟墓第64弱点 婚姻不能接收批评第65弱点 不要在情绪上被女人左右第66弱点 金钱买不来幸福的婚姻第67弱点 不要做婚姻的文盲第六章 善于交往走出交际盲区一个人有没有社交能力，直接决定着他在社会生活中能不能成功，社交能力就是在社会生活领域里，搞好人际交往关系的能力。人际交往就是两个或两个以上的人之间，交流思想，交换意见，表达情意、需求、态度，传递知识与信息的过程。能够运用最恰当的方式、技巧来处理各种各样的人际矛盾，就是社会能力强的表现。 第68弱点 不要侵犯别人的“领地”第69弱点 不要贸然揭开别人的面具第70弱点 拒绝来路不明的好意第71弱点 不要吝啬对别人的赞美第72弱点 不要屈服于蛮横之人第73弱点 不要害怕对别人说“不”第74弱点 不要对敌人心存报复第75弱点 不要总是责怪别人第76弱点 不要光踢椅子第77弱点 不要因小事而垂头丧气第78弱点 没有白吃的午餐第79弱点 不要轻易许下诺言第80弱点 不疏远落魄的朋友第81弱点 好朋友不要有“糊涂账”第82弱点 朋友间不要有金钱的借贷关系第83弱点 不要把苦恼投于他人身上第84弱点 不要窥视朋友隐私第85弱点 勿结交势利“朋友”第86弱点 顺势求人莫心急第87弱点 朋友之间不要太亲密第88弱点 不要与穷人合作第89弱点 铁哥们儿别共事第90弱点 不要辜负他人的期望第91弱点 莫管他人闲第92弱点 避免跟人发生正面冲突第七章 抵抗挫折勇于挑战这个世上确有不少被埋没的人，但是，对于一个优秀的人来讲，不论他处在何种逆境下，也一定可以取得某种程度的成功，不管遭遇多大的困难，他们也决不会沮丧。纵使遭遇再大的挫折也能重新站起，勇往直前。 第93弱点 受打击后不要存心第94弱点 不要怕失败第95弱点 投机取巧有害无利第96弱点 别怕人生的挑战第97弱点 推脱借口无法实现目的第98弱点 不要以小利绊倒自己第99弱点 不做投机买卖第100弱点 避免吃官司","tags":[{"name":"阅读","slug":"阅读","permalink":"http://www.hongye567.top/tags/阅读/"}]},{"title":"Chrome上 几个值得推荐的插件","date":"2017-05-14T08:59:29.000Z","path":"posts/7f9837ee.html","text":"推荐几款自己正在使用的插件，推荐等级与顺序无关。 1. Anything to QRcode通过右键菜单或地址栏按钮将当前页面地址、选中的文本、链接、图片地址等文本内容生成二维码，也可以解析页面中的二维码图片，完全离线可用，不依赖任何远程文件和服务，内存占用小，不常驻后台，界面简洁，无广告。 作者用于测试 web 适配，当开发的网页需要用手机测试时，不再需要手动输入二维码，用此插件生成二维码后手机扫码访问即可。 2. Infinity 新标签页Infinity新标签页，基于Chrome的云应用服务，让你更优雅、轻松地使用Chrome。 3. JSON-handle对JSON格式的内容进行浏览和编辑，以树形图样式展现JSON文档，并可实时编辑。 4. OctotreeExtension to show code tree for GitHub and GitLab. Features: Easy-to-navigate code tree like IDEs Support private repositories Support GitHub and GitLab Enterprise Learn more about Octotree settings: https://github.com/buunguyen/octotree#settings 5. PostmanSupercharge your API workflow with Postman!","tags":[{"name":"Chrome","slug":"Chrome","permalink":"http://www.hongye567.top/tags/Chrome/"}]},{"title":"Android style 样式应用学习","date":"2017-05-09T04:47:11.000Z","path":"posts/21da5cff.html","text":"123456789101112&lt;!--透明状态栏 19及以上--&gt;&lt;item name=\"android:windowTranslucentStatus\"&gt;true&lt;/item&gt;&lt;!--透明导航栏 19及以上--&gt;&lt;item name=\"android:windowTranslucentNavigation\"&gt;true&lt;/item&gt;&lt;!--标题栏颜色--&gt;&lt;item name=\"colorPrimary\"&gt;@color/colorPrimary&lt;/item&gt;&lt;!--状态栏颜色--&gt;&lt;item name=\"colorPrimaryDark\"&gt;@color/colorPrimary&lt;/item&gt;&lt;!--强调色，一些控件和游标的颜色--&gt;&lt;item name=\"colorAccent\"&gt;@color/colorPrimary&lt;/item&gt;&lt;!--是否半透明--&gt;&lt;item name=\"android:windowIsTranslucent\"&gt;true&lt;/item&gt; 应用一：修改状态栏颜色当 values 文件夹和 values-v19 文件夹中存在相同命名的 style，最后会采用最接近设备 API 的版本，如我的手机 API 19，会采用 values-v19 中的样式，而不采用 values 中的样式","tags":[{"name":"Android","slug":"Android","permalink":"http://www.hongye567.top/tags/Android/"}]},{"title":"React Native 之在设备上运行","date":"2017-05-07T11:24:21.000Z","path":"posts/ed3c977b.html","text":"转自: http://reactnative.cn/docs/0.44/running-on-device-android.html 前提条件：USB调试你需要开启USB调试才能在你的设备上安装你的APP。首先，确定你已经打开设备的USB调试开关 确保你的设备已经成功连接。可以输入adb devices来查看: 1234$ adb devicesList of devices attachedemulator-5554 offline # Google模拟器14ed2fcc device # 真实设备 在右边那列看到device说明你的设备已经被正确连接了。注意，你只应当连接仅仅一个设备。 译注：如果你连接了多个设备（包含模拟器在内），后续的一些操作可能会失败。拔掉不需要的设备，或者关掉模拟器，确保adb devices的输出只有一个是连接状态。 现在你可以运行react-native run-android来在设备上安装并启动应用了。 译注：在真机上运行时可能会遇到白屏的情况，请找到并开启悬浮窗权限。比如miui系统的设置在此处。 提示 你还可以运行react-native run-android --variant=release来安装release版的应用。当然你需要先配置好签名，且此时无法再开启开发者菜单。注意在debug和release版本间来回切换安装时可能会报错签名不匹配，此时需要先卸载前一个版本再尝试安装。 从设备上访问开发服务器。在启用开发服务器的情况下，你可以快速的迭代修改应用，然后在设备上查看结果。按照下面描述的任意一种方法来使你的运行在电脑上的开发服务器可以从设备上访问到。 注意 大部分现代的安卓设备已经没有了硬件”Menu”按键，这是我们用来调出开发者菜单的。在这种情况下你可以通过摇晃设备来打开开发者菜单(重新加载、调试，等等……) (Android 5.0及以上)使用adb reverse命令 注意，这个选项只能在5.0以上版本(API 21+)的安卓设备上使用。 首先把你的设备通过USB数据线连接到电脑上，并开启USB调试（关于如何开启USB调试，参见上面的章节）。 运行adb reverse tcp:8081 tcp:8081 不需要更多配置，你就可以使用Reload JS和其它的开发选项了。 (Android 5.0以下)通过Wi-Fi连接你的本地开发服务器 首先确保你的电脑和手机设备在同一个Wi-Fi环境下。 在设备上运行你的React Native应用。和打开其它App一样操作。 你应该会看到一个“红屏”错误提示。这是正常的，下面的步骤会解决这个报错。 摇晃设备，或者运行adb shell input keyevent 82，可以打开开发者菜单。 点击进入Dev Settings。 点击Debug server host for device。 输入你电脑的IP地址和端口号（譬如10.0.1.1:8081）。在Mac上，你可以在系统设置/网络里找查询你的IP地址。在Windows上，打开命令提示符并输入ipconfig来查询你的IP地址。在Linux上你可以在终端中输入ifconfig来查询你的IP地址。 回到开发者菜单然后选择Reload JS。","tags":[{"name":"React","slug":"React","permalink":"http://www.hongye567.top/tags/React/"}]},{"title":"React Native 之搭建开发环境","date":"2017-05-07T11:13:28.000Z","path":"posts/4b0b1b34.html","text":"转自: http://reactnative.cn/docs/0.44/getting-started.html 欢迎使用React Native！这篇文档会帮助你搭建基本的React Native开发环境。如果你已经搭好了环境，那么可以尝试一下编写Hello World。 根据你所使用的操作系统、针对的目标平台不同，具体步骤有所不同。如果想同时开发iOS和Android也没问题，你只需要先选一个平台开始，另一个平台的环境搭建只是稍有不同。 如果阅读完本文档后还碰到很多环境搭建的问题，我们建议你还可以再看看由本站提供的环境搭建视频教程(macOS iOS、macOS Android、windows Android)、windows环境搭建文字教程、以及常见问题。 目标平台： iOS Android 开发平台： macOS Linux Windows 安装必需的软件ChocolateyChocolatey是一个Windows上的包管理器，类似于linux上的yum和 apt-get。 你可以在其官方网站上查看具体的使用说明。一般的安装步骤应该是下面这样： 1@powershell -NoProfile -ExecutionPolicy Bypass -Command \"iex ((new-object net.webclient).DownloadString('https://chocolatey.org/install.ps1'))\" &amp;&amp; SET PATH=%PATH%;%ALLUSERSPROFILE%\\chocolatey\\bin 一般来说，使用Chocolatey来安装软件的时候，需要以管理员的身份来运行命令提示符窗口。译注：chocolatey的网站可能在国内访问困难，导致上述安装命令无法正常完成。请使用稳定的翻墙工具。 如果你实在装不上这个工具，也不要紧。下面所需的python2和nodejs你可以分别单独去对应的官方网站下载安装即可。 Python 2打开命令提示符窗口，使用Chocolatey来安装Python 2. 注意目前不支持Python 3版本。 1choco install python2 Node打开命令提示符窗口，使用Chocolatey来安装NodeJS。注意，目前已知Node 7.1版本在windows上无法正常工作，请避开这个版本！ 1choco install nodejs.install 安装完node后建议设置npm镜像以加速后面的过程（或使用科学上网工具）。注意：不要使用cnpm！cnpm安装的模块路径比较奇怪，packager不能正常识别！ 12npm config set registry https://registry.npm.taobao.org --globalnpm config set disturl https://npm.taobao.org/dist --global Yarn、React Native的命令行工具（react-native-cli）Yarn是Facebook提供的替代npm的工具，可以加速node模块的下载。React Native的命令行工具用于执行创建、初始化、更新项目、运行打包服务（packager）等任务。 1npm install -g yarn react-native-cli 安装完yarn后同理也要设置镜像源： 12yarn config set registry https://registry.npm.taobao.org --globalyarn config set disturl https://npm.taobao.org/dist --global 如果你遇到EACCES: permission denied权限错误，可以尝试运行下面的命令（限linux系统）： sudo npm install -g yarn react-native-cli. Android StudioAndroid Studio 2.0 or higher. React Native目前需要Android Studio2.0或更高版本。 Android Studio需要Java Development Kit [JDK] 1.8或更高版本。你可以在命令行中输入javac -version来查看你当前安装的JDK版本。如果版本不合要求，则可以到 官网上下载。 或是使用包管理器来安装（比如choco install jdk8或是apt-get install default-jdk） Android Studio包含了运行和测试React Native应用所需的Android SDK和模拟器。 除非特别注明，请不要改动安装过程中的选项。比如Android Studio默认安装了 Android Support Repository，而这也是React Native必须的（否则在react-native run-android时会报appcompat-v7包找不到的错误）。 确定所有安装都勾选了，尤其是Android SDK和Android Device Emulator。 在初步安装完成后，选择Custom安装项： 检查已安装的组件，尤其是模拟器和HAXM加速驱动。 安装完成后，在Android Studio的欢迎界面中选择Configure | SDK Manager。 在SDK Platforms窗口中，选择Show Package Details，然后在Android 6.0 (Marshmallow)中勾选Google APIs、Android SDK Platform 23、Intel x86 Atom System Image、Intel x86 Atom\\_64 System Image以及Google APIs Intel x86 Atom\\_64 System Image。 在SDK Tools中，选择Show Package Details，然后在Android SDK Build Tools中勾选Android SDK Build-Tools 23.0.1（必须是这个版本）。然后还要勾选最底部的Android Support Repository. ANDROID_HOME环境变量确保ANDROID\\_HOME环境变量正确地指向了你安装的Android SDK的路径。 打开控制面板 -&gt; 系统和安全 -&gt; 系统 -&gt; 高级系统设置 -&gt; 高级 -&gt; 环境变量 -&gt; 新建 具体的路径可能和下图不一致，请自行确认。 你需要关闭现有的命令符提示窗口然后重新打开，这样新的环境变量才能生效。 推荐安装的工具Gradle Daemon开启Gradle Daemon可以极大地提升java代码的增量编译速度。 1(if not exist \"%USERPROFILE%/.gradle\" mkdir \"%USERPROFILE%/.gradle\") &amp;&amp; (echo org.gradle.daemon=true &gt;&gt; \"%USERPROFILE%/.gradle/gradle.properties\") 将Android SDK的Tools目录添加到PATH变量中你可以把Android SDK的tools和platform-tools目录添加到PATH变量中，以便在终端中运行一些Android工具，例如android avd或是adb logcat等。 打开控制面板 -&gt; 系统和安全 -&gt; 系统 -&gt; 高级系统设置 -&gt; 高级 -&gt; 环境变量 -&gt; 选中PATH -&gt; 双击进行编辑 注意你的具体路径可能和下图不同 可选的安装项Git你可以使用Chocolatey来安装git: 1choco install git 另外你也可以直接去下载Git for Windows。 在安装过程中注意勾选”Run Git from Windows Command Prompt”，这样才会把git命令添加到PATH环境变量中。 Genymotion比起Android Studio自带的原装模拟器，Genymotion是一个性能更好的选择，但它只对个人用户免费。 下载和安装Genymotion（genymotion需要依赖VirtualBox虚拟机，下载选项中提供了包含VirtualBox和不包含的选项，请按需选择）。 打开Genymotion。如果你还没有安装VirtualBox，则此时会提示你安装。 创建一个新模拟器并启动。 启动React Native应用后，可以按下F1来打开开发者菜单。 Visual Studio Emulator for AndroidVisual Studio Emulator for Android)是利用了Hyper-V技术进行硬件加速的免费android模拟器。也是Android Studio自带的原装模拟器之外的一个很好的选择。而且你并不需要安装Visual Studio。 在用于React Native开发前，需要先在注册表中进行一些修改： 打开运行命令（按下Windows+R键） 输入regedit.exe然后回车 在注册表编辑器中找到HKEY_LOCAL_MACHINE\\SOFTWARE\\Wow6432Node\\Android SDK Tools条目 右键点击Android SDK Tools，选择新建 &gt; 字符串值 名称设为Path 双击Path，将其值设为你的Android SDK的路径。（例如C:\\Program Files\\Android\\sdk） 测试安装123react-native init AwesomeProjectcd AwesomeProjectreact-native run-android 提示：你可以使用--version参数创建指定版本的项目。例如react-native init MyApp --version 0.39.2。注意版本号必须精确到两个小数点。 Windows用户请注意，请不要在命令行默认的System32目录中init项目！会有各种权限限制导致不能运行！ 修改项目现在你已经成功运行了项目，我们可以开始尝试动手改一改了： 使用你喜欢的文本编辑器打开index.android.js并随便改上几行 按两下R键，或是用Menu键（通常是F2，在Genymotion模拟器中是⌘+M）打开开发者菜单，然后选择 Reload JS 就可以看到你的最新修改。 在终端下运行adb logcat *:S ReactNative:V ReactNativeJS:V可以看到你的应用的日志。 完成了！恭喜！你已经成功运行并修改了你的第一个React Native应用。 接下来 如果你想要在真机上运行应用，请参阅在设备上运行。 如果你碰到了一些问题，请参阅常见问题","tags":[{"name":"React","slug":"React","permalink":"http://www.hongye567.top/tags/React/"}]},{"title":"HBuilder 上传图片到七牛云","date":"2017-04-06T07:34:39.000Z","path":"posts/99def624.html","text":"HBuilder 上传支持表单上传，所以上传到七牛云的时候用的也是表单上传 12345678910111213141516171819202122232425262728293031323334353637/** * 上传图片到七牛云 * @param String imgPath 图片路径 */function uploadToQiniu(imgPath)&#123; // 七牛云空间域名，修改为自己的 var domain = \"http://onpzdyxr0.bkt.clouddn.com/\"; // 生成一个随机名字作为上传到七牛云后的文件名 var randName = Math.random().toString(36).substr(2) + imgPath.match(/\\.?[^.\\/]+$/); var task = plus.uploader.createUpload( // 不同的存储空间上传地址可能不一样，运行后根据返回信息做更改 \"http://upload.qiniu.com/\", &#123; method: \"POST\", blocksize:204800, priority:100 &#125;, function ( t, status ) &#123; // 上传完成 if ( status == 200 ) &#123; console.log( \"Upload success: \" + t.url ); // 拼接出上传到去七牛云后的图片链接地址 var imgUrl = domain + randName; &#125; else &#123; console.log( \"Upload failed: \" + status ); &#125; &#125; ); // 添加上传文件，key 值必须是七牛云所需文件对应的 key 值 \"file\" task.addFile(imgPath,&#123;key: \"file\",mime: \"image/*\"&#125;); // 上传到七牛云后文件的名字 task.addData(\"key\",randName); // 七牛云所需 token task.addData(\"token\",token); task.start();&#125; 参考资料：七牛云表单上传官方文档 &gt;&gt;HBuilder 上传官方文档 &gt;&gt;","tags":[{"name":"HBuilder","slug":"HBuilder","permalink":"http://www.hongye567.top/tags/HBuilder/"},{"name":"MUI","slug":"MUI","permalink":"http://www.hongye567.top/tags/MUI/"}]},{"title":"Android 下载安装APK","date":"2017-03-29T09:11:28.000Z","path":"posts/a5a9b325.html","text":"下载安装包未整理完，暂且不写，日后更新 安装应用123456789101112131415161718/** * 安装 APK * @param activity * @param fileUri 安装包地址 * fileUri = Uri.parse(\"file://\" + filePath); 或 * fileUri = Uri.fromFile(File file); */ protected void installApk(Activity activity, Uri fileUri) &#123; Intent intent = new Intent(); //执行动作 intent.setAction(Intent.ACTION_VIEW); // 如果不加无法正常显示安装过程和安装成功提示 intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK); //执行的数据类型 intent.setDataAndType(fileUri, \"application/vnd.android.package-archive\"); activity.startActivity(intent); // android.os.Process.killProcess(android.os.Process.myPid()); &#125; demo下载&gt;&gt;","tags":[{"name":"Android","slug":"Android","permalink":"http://www.hongye567.top/tags/Android/"}]},{"title":"JS 实现倒计时","date":"2017-03-21T05:58:21.000Z","path":"posts/2883d964.html","text":"利用 window.setInterval() 实现倒计时示例：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950var id;var interval = 1000; /** * @param year 结束日期的年 * @param month 结束日期的月 * @param day 结束日期的日 * @param divname 需做出响应的元素id */function ShowCountDown(year,month,day,divname) &#123; // 设置结束日期 var endDate = new Date(year, month-1, day); // 获取当前日期 var now = new Date(); // 计算剩余毫秒数 var leftTime=endDate.getTime()-now.getTime(); // 计算剩余秒数 var leftsecond = parseInt(leftTime/1000); // 剩余天数（整数倍） var day1=Math.floor(leftsecond/(60*60*24)); // 剩余小时数（除去大单位后整数倍） var hour=Math.floor((leftsecond-day1*24*60*60)/3600); // 剩余分钟数（除去大单位后整数倍） var minute=Math.floor((leftsecond-day1*24*60*60-hour*3600)/60); // 剩余秒数（除去大单位后整数倍） var second=Math.floor(leftsecond-day1*24*60*60-hour*3600-minute*60); var cc = document.getElementById(divname); cc.innerHTML = \"距离\" + year + \"年\" + month + \"月\" + day + \"日还有：\" + day1 + \"天\" + hour + \"小时\" + minute + \"分\" + second + \"秒\"; &#125; /** * 开始倒计时 */function start()&#123; id = window.setInterval( function() &#123; ShowCountDown(2023,8,7,'divdown1'); &#125;, interval); &#125;/** * 停止倒计时 */function stop()&#123; if (id) &#123; window.clearInterval(id); &#125;&#125; window.setInterval() 注解1. window.setInterval()功能：按照指定的周期（以毫秒计）来调用函数或计算表达式。语法：setInterval(code,millisec)参数：code: 在定时时间到时要执行的JavaScript代码串。millisec: 设定的定时时间，用毫秒数表示。返回值：定时器的ID值，可用于clearInterval()方法停止指定的定时器。注：setInterval()方法会不停地调用函数，直到用clearInterval()终止定时或窗口被关闭。 2. window.clearInterval()功能：取消由 setInterval() 方法设置的定时器。语法：clearInterval(id_of_setinterval)参数：id_of_setinterval: 由 setInterval() 返回的 id 值。该值标识了一个 setInterval 定时器。也就是：window.setInterval() 返回的就是 window.clearInterval() 的参数","tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://www.hongye567.top/tags/JavaScript/"}]},{"title":"遍历 Map 的四种方法","date":"2017-03-21T03:07:19.000Z","path":"posts/6fa78ea3.html","text":"1. 通过 Map.keySet 遍历 key 和 value，二次取值（常用） 123for ( String key : map.keySet() ) &#123; System.out.println( \"key = \" + key +\" and value = \" + map.get( key ) );&#125; 2. 通过 Map.entrySet 使用 iterator 遍历 key 和 value 12345Iterator&lt;Map.Entry&lt;String, String&gt;&gt; it = map.entrySet().iterator();while ( it.hasNext() ) &#123; Map.Entry&lt;String, String&gt; entry = it.next(); System.out.println( \"key = \" + entry.getKey() + \" and value = \" + entry.getValue() );&#125; 3. 通过 Map.entrySet 遍历 key 和 value（推荐，尤其容量大的时候） 123for ( Map.Entry&lt;String, String&gt; entry : map.entrySet() ) &#123; System.out.println( \"key = \" + entry.getKey() + \" and value = \" + entry.getValue() );&#125; 4. 通过 Map.values() 遍历所有的 value，但不能遍历 key 123for ( String v : map.values() ) &#123; System.out.println( \"value = \" + v );&#125;","tags":[{"name":"Java","slug":"Java","permalink":"http://www.hongye567.top/tags/Java/"}]},{"title":"Hexo 在 GitHub 和 Coding 同时发布","date":"2017-03-04T05:08:58.000Z","path":"posts/d973cb7c.html","text":"多平台发布在 GitHub 和 Coding 上都有博客，分开一一发布比较麻烦，其实 Hexo 是支持在多个平台发布的。修改 Hexo 主目录下的 _config.yml 配置文件即可 1234567deploy: - type: git repository: https://github.com/Hongye567/Hongye567.github.io.git branch: master - type: git repository: https://git.coding.net/Honye/Honye.git branch: master 免输入密码Hexo 每次提交时都要求输入用户名和密码，尤其在多平台发布时需要多次输入用户名和密码很是麻烦。要求输入密码的原因是我们的仓库地址用的是 HTTPS 不是 SSH。 1. 首先生成 SSH 密钥 1234$ git config --global user.name \"yourname\" // 配置 git 用户名$ git config --global user.email \"youremail@email.com\" // 配置 git 邮箱$ cd ~/.ssh // 查看是否已有.ssh文件夹，若有可备份删除$ ssh-keygen -t rsa -C \"youremail@email.com\" // 生成 SSH 密钥 生成密钥时会提示选择密钥保存路径，直接回车默认路径即可。会提示输入密码和确认密码，直接回车代表不设置密码。 2. 部署公钥在 GitHub 和 Coding 在部署公钥操作基本一样，我不一一赘述，仅以 GitHub 为例。打开 GitHub 项目，选择上方菜单 Settings，接着选择左侧菜单 Deploy keys，接着 Add deploy key，打开前面密钥所在文件夹，将 id_rsa.pub 文件中的内容粘贴在 GitHub 即可。 3. Hexo 提交修改 Hexo 主目录下 _config.yml 配置文件中的参数 1234567deploy: - type: git repository: git@github.com:Hongye567/Hongye567.github.io.git branch: master - type: git repository: git@git.coding.net:Honye/Honye.git branch: master 现在提交就可以不用输入密码了。提交的时候可能会报 authenticity 可靠性问题，直接输入 yes 忽略即可。","tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://www.hongye567.top/tags/Hexo/"},{"name":"GitHub","slug":"GitHub","permalink":"http://www.hongye567.top/tags/GitHub/"},{"name":"Coding","slug":"Coding","permalink":"http://www.hongye567.top/tags/Coding/"}]},{"title":"hexo 在 coding 上部署博客","date":"2017-03-04T04:11:58.000Z","path":"posts/b3459307.html","text":"之前是在 GitHub 上部署的静态博客，由于 GitHub 属于国外网站，访问速度慢，听闻可以在 Coding 部署博客，故而转向 Coding。 1. Hexo 环境搭建Hexo 的环境搭建我之前在 GitHub 搭建博客教程中已经说明，不在赘述。也可到 Hexo 官网查看文档。 2. 在 Coding 上新建项目理论上项目名称没要求，但是在我实际操作中出现了引用资源未找到的问题。在引用路径上缺少了一个项目名。所以我的项目名和我的用户名一致，理由是如果项目名和用户名不一致，访问地址必须是 {user_name}.coding.me/{project_name}，如果项目名与用户名一致，可使用 {user_name}.coding.me 直接访问，也避免了上面说的资源引用问题，是我推荐的。若有大神能解决资源引用问题用其他名字也是可行的。项目可私有，不影响访问。选择项目，进入代码页面，选择 Pages 服务，部署来源后即可访问。 3. Hexo Push提交和在 GitHub 大致没什么区别，只需要在 Hexo 主目录的 _config.yml 配置文件中更改下仓库地址即可。 1234deploy: type: git repository: https://git.coding.net/&#123;user_name&#125;/&#123;project_name&#125;.git branch: master 提交玩后就可以访问查看效果了","tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://www.hongye567.top/tags/Hexo/"},{"name":"Coding","slug":"Coding","permalink":"http://www.hongye567.top/tags/Coding/"}]},{"title":"Hexo 编译时 JS 混乱解决方案","date":"2017-03-03T08:00:17.000Z","path":"posts/528ee353.html","text":"之前为在 GitHub 博客上写自己的 html 网页，在 hexo 根目录下的 source 文件夹中放了自己的 js 文件，每次 hexo g 后，pubic 文件夹中的 js 文件就混乱了，与自己实际 js 不一致。 解决方案： hexo g 编译后在 public 文件夹中修改，将自己的 js 文件覆盖 hexo 编译后的 js 文件。或者 hexo d 提交到 GitHub 后直接到 GitHub 线上修改 js 文件。 博客中的 js 引用使用外链的形式。如将 js 文件上传七牛云，引用七牛云上的 js。 跳过 hexo 渲染【推荐】。Hexo 3.0 以下使用：在主目录下添加 README.md 文件或者 html 文件。Hexo 3.0 以上支持：修改 Hexo 主目录下的 _config.yml 配置文件中的 skip_render 参数。 1234567891011skip_render: \"test.html\" # source 文件夹下指定文件skip_render: test/* # 单个文件夹下全部文件skip_render: test/*.md # 单个文件夹下指定类型文件skip_render: test/** # 单个文件夹下全部文件及子文件skip_render: # 多个文件夹以及其他情况 - test/* - test/*.html 注：若修改配置后不见效果，先执行 hexo clean 后再执行 hexo g 重新编译 原文&gt;&gt;Hexo 常见问题解决方案","tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://www.hongye567.top/tags/Hexo/"}]},{"title":"MUI返回传参","date":"2017-02-05T02:40:09.000Z","path":"posts/8a8d53c0.html","text":"从a页面跳转到b页面，从b页面返回到a页面时向a页面传递一个参数，a页面接收到参数后做出响应a.html12345678910111213141516171819202122232425262728293031323334353637383940414243444546&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no\" /&gt; &lt;title&gt;&lt;/title&gt; &lt;script src=\"js/mui.min.js\"&gt;&lt;/script&gt; &lt;link href=\"css/mui.min.css\" rel=\"stylesheet\"/&gt; &lt;script type=\"text/javascript\" charset=\"utf-8\"&gt; mui.init(); (function($) &#123; function plusReady() &#123; mui('body').on('tap', '.jump', function() &#123; mui.openWindow(&#123; url: 'b.html', id: 'b' &#125;); &#125;); &#125; // if(window.plus) &#123;// alert(\"准备好了\");// plusReady();// &#125; else &#123;// alert(\"未准备\"); document.addEventListener('plusready', plusReady, false);// &#125; // 返回回来要执行的方法 function backRes(e) &#123; var val = e.detail.inputVal; $('.a1 font')[0].innerHTML = val; &#125; // 自定义窗体事件 doit要和b页面定义的事件一致 window.addEventListener('doit', backRes); &#125;)(mui); &lt;/script&gt;&lt;/head&gt;&lt;body style=\"padding: 15px;line-height: 1.7rem;\"&gt; &lt;a class=\"jump\"&gt;跳转到B页面&lt;/a&gt; &lt;div class=\"a1\"&gt;返回传参为----&lt;font style=\"font-size: 20px;color: #2AC845;\"&gt;&lt;/font&gt;&lt;/div&gt; &lt;div style=\"font-size: 50px;text-align: center;display: block;margin: 50px 0 0 0;\"&gt;a.html页面&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; b.html123456789101112131415161718192021222324252627282930313233343536&lt;!doctype html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;&lt;/title&gt; &lt;meta name=\"viewport\" content=\"width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no\" /&gt; &lt;link href=\"css/mui.min.css\" rel=\"stylesheet\" /&gt; &lt;/head&gt; &lt;body style=\"padding: 15px;line-height: 1.7rem;\"&gt; &lt;input type=\"text\" id=\"text\" /&gt; &lt;a href=\"javascript:void(0)\" class=\"jump\"&gt;返回&lt;/a&gt; &lt;div style=\"font-size: 50px;text-align: center;display: block;margin: 50px 0 0 0;\"&gt;b.html页面&lt;/div&gt; &lt;script src=\"js/mui.min.js\"&gt;&lt;/script&gt; &lt;script type=\"text/javascript\"&gt; mui.init(); (function($) &#123; if(window.plus) &#123; plusReady(); &#125; else &#123; document.addEventListener('plusready', plusReady, false); &#125; function plusReady() &#123; mui('body').on('tap', '.jump', function() &#123; var view = plus.webview.getWebviewById('HBuilder'); // 注意HBuilder是上个页面的ID你自己要替换掉 mui.fire(view, 'doit', &#123; inputVal: $('#text')[0].value &#125;); mui.back(); &#125;); &#125; &#125;)(mui); &lt;/script&gt; &lt;/body&gt;&lt;/html&gt;","tags":[{"name":"MUI","slug":"MUI","permalink":"http://www.hongye567.top/tags/MUI/"}]},{"title":"利用hexo和github搭建博客（一）","date":"2016-12-16T08:14:25.000Z","path":"posts/7e4c8da2.html","text":"在搜素文章时无意间发现一篇很漂亮的博客，一看时个人博客，自己也就想创建一个属于自己的博客，初步完成后就写下此文章便于日后查询。 本文是利用hexo在GitHub上建立的静态博客。主要有三个步骤： 下载和安装所需软件 搭建本地静态博客 将本地博客同步到GitHub上 购买设置专属域名（可选） 搭建环境 node.js git hexo node.js 和 git 我就不多说了，自己在官网按着官方指示一步一步下载安装。我主要来说明下hexo的安装。node.js 和 git 安装完成后，新建一个博客目录，在目录下使用 git bash here （可用命令行）执行1$ npm install -g hexo 根据网络情况下载，等待安装完成 搭建本地博客cd 到本地博客路径，初始化1$ hexo init 安装依赖包1$ npm install 重启后再在博客目录下,生成必要文件和部署12$ hexo generate$ hexo deploy 启动 hexo，在本地预览1$ hexo server 在浏览器输入 http://localhost:4000 预览。若正常显示，则本地博客初始化成功 同步到 GitHub登录 GitHub，没有账号的 Sign up（注册）一个，已有账号的直接登录 Sign in（登录）登陆后点击“+”选择“New repository” Repository name：指定格式：’GitHub用户名’.github.io Description：可选 Public：必须公开 在本地博客目录下有一个_config.yml配置文件，使用编辑器打开，修改Deployment部分：123456# Deployment## Docs: http://hexo.io/docs/deployment.htmldeploy: type: github repository: https://github.com/voidking/voidking.github.io.git branch: master 注意：冒号后面必须跟一个空格，不然会出错再在博客目录下执行如下命令同步到GitHub12$ hexo generate$ hexo deploy 若报错 error deployer not found:github 可能是 hexo 更新问题解决方案：将 github 改为 git、将 https 改为 http 后重试 123456# Deployment## Docs: http://hexo.io/docs/deployment.htmldeploy: type: git repository: http://github.com/voidking/voidking.github.io.git branch: master 若还是报错，先执行如下指令后重试1$ npm install hexo-deployer-git --save 在浏览器访问https://‘GitHub用户名’.github.io，若正常显示，则博客已同步到GitHub 至此静态博客就初步搭建完成了！！！","tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://www.hongye567.top/tags/Hexo/"},{"name":"GitHub","slug":"GitHub","permalink":"http://www.hongye567.top/tags/GitHub/"}]},{"title":"Hello World","date":"2016-11-05T14:26:27.000Z","path":"posts/4a17b156.html","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]},{"title":"几个常见的 Git 代码托管平台","date":"2016-11-01T12:03:01.000Z","path":"posts/6c8e222d.html","text":"说到 Git 代码托管平台，首先推荐的是 GitHub，好多好的开源项目都来自 GitHub，但是 GitHub 只能新建公开的 Git 仓库，私有仓库要收费，如果你做的是一个开源项目，可以首选 GitHub。下面推荐几个比较好的 Git 代码托管平台，这里我不做过多的说明和评价，也好让大家多看看，比较一下，找到自己的”真爱”。 1、GitHub 关于GItHub相信大家都有耳闻，我就不详细介绍了。GitHub地址：https://github.com/，其首页如图： 2、GitLab 对于有些人，提到 GitHub 就会自然的想到 Gitlab, Gitlab 支持无限的公有项目和私有项目。Gitlab 地址：https://about.gitlab.com/，其首页截图如图： 3、Bitbucket Bitbucket 免费支持5个开发成员的团队创建无限私有代码托管库。Bitbucket地址：https://bitbucket.org/，首页如图： 4、(推荐)开源中国代码托管 前面说的都是国外的，下面来说几个国内的。开源中国一个账号最多可以创建1000个项目，包含公有和私有。Git @ OSC 是开源中国社区团队基于开源项目 GitLab 开发的在线代码托管平台。Git @ OSC 除了提供最基础的 git 代码托管之外，还提供代码在线查看、历史版本查看、Fork、Pull Reuqest 、打包下载任意版本、Issue、Wiki 等方便管理、开发、协作、共享的功能，具体请查看帮助。开源中国代码托管地址：http://git.oschina.net/，其首页如图： 开源中国在几个月前又发布了团队协作开发平台，和代码托管平台一起，打造了一个十分好的团队开发平台，开源中国团队协作平台地址：http://team.oschina.net/，团队协作平台支持任务的创建、讨论、便签等，如图： 5、(推荐)Coding.net 谈到 coding.net, 首先必须提的是速度快，功能与开源中国相似，同样一个账号最多可以创建1000个项目，也支持任务的创建等。coding.net地址：https://coding.net/home.html，其首页如图： 6、CSDN 代码托管 2013年6月28日推出代码托管与社交编程平台“CODE”，CSDN CODE 系统搭建于阿里云 IaaS 平台之上，向个人开发者、IT 团队及企业提供代码托管、在线协作、社交编程、项目管理等服务。作为 CSDN 整体服务的一部分， CSDN CODE 平台使用 CSDN 通行证系统，与 CSDN 其他业务账号互通， 方便用户在各个业务间切换。CSDN 代码托管地址：https://code.csdn.net/，首页如图： 7、京东代码托管平台 作为京东电商云生态的重要一环，京东云汇中的代码托管平台2013年7月份起全面对外开放，用户只要拥有京东账号即可使用的代码托管服务。此外，为了支持国内程序员开源社区建设，目前平台对每个项目均提供免费的1G存储空间，并设置了“代码一键迁移”功能，用户可以方便的从其他GIT代码托管平台转移其项目到京东代码库。京东云汇中开放的免费代码托管平台实现了基于Git的开发任务分包管理、代码在线和离线编辑、编码助手、代码版本管理等全程的代码管理服务。京东代码托管平台地址：https://code.jd.com/，首页如图： 8、淘宝代码托管平台 http://code.taobao.org/ TaoCode 是为开源爱好者和广大技术人员提供交流、孵化、创新项目的平台，同时平台也遵循开源理念全面开源，欢迎更多朋友来参与平台建设，希望在我们共同的努力下能加速中国开源消费者向开源贡献者的转变。","tags":[{"name":"Git","slug":"Git","permalink":"http://www.hongye567.top/tags/Git/"}]},{"title":"Git 代码托管","date":"2016-11-01T07:24:25.000Z","path":"posts/dd07dd9c.html","text":"一、SSH配置首先单机鼠标右键，打开Git Bash here，打开 Git 命令窗口，输入命令： 1$ ssh-keygen -t rsa -C \"your_email@youremail.com\" 点击回车，出现如下提示： 这个时候我们看到询问我们保存 key 的路径，使用默认即可，直接敲回车继续，这里我已经生成过了，所以我输入了新的路径和文件名，回车后会让输入两次密码( passphrase ), 输入一个大于 4 位的密码即可。然后会看到 SSH 生成成功，如图： 这里可以看到，我们的公钥保存到了yunfeifei_rsa.pub文件中，大家用的是默认路径的话，就打开路径C:\\Users\\Admin\\.ssh，会看到如图所示文件：用文本编辑工具如记事本打开id_rsa.pub,复制里面的内容，先保存起来，到后面使用。输入如下口令查看公钥：1$ cat ~/.ssh/id_rsa.pub 二、使用SSH在上面我们使用 Git bash 生成了 SSH 的公钥和私钥，下面以 coding.net 为例介绍一下如何将公钥部署到远程 Git 仓库，打开设置中心，如图：选择 SSH 公钥，填写公钥名称(可以随意起名字)，然后把我们刚刚从id_rsa.pub里面复制出来的东西粘贴到 SSH-RSA 公钥 key 这个文本框中即可。如图：添加完成后，我们打开 Git 命令窗口测试，输入如下命令：1$ ssh -T git@coding.net 这个时候会提示你是否继续连接,如图：输入 yes, 回车继续，会出现如下提示,如图: Git 版本控制入门如果你不熟悉 Git，点此查看权威 Git 书籍 ProGit（中文版），新手老鸟均适合。Git 官网Git 客户端下载地址Git 手册网友整理的Git@osc教程。一份很好的 Git 入门教程Git 快速入门（gif动画版） 如何在 Git 码云上上传项目首先,注册码云账号,添加新项目,打开终端:步骤如下: cd 切换到工程目录 Git 全局设置 12$ git config --globaluser.name \"user.name\"$ git config --global user.email \"user.email\" $ git init 初始化一个git 仓库 $ touch README.md 创建帮助文件 $ git add README.md 添加文件 $ git commit -m &quot;注释内容” 添加注释 $ git remote add origin https://git.oschina.net/username/cccc.git 你的远程仓库地址 // 和远程仓库进行关联 $ git push -u origin master 上传仓库到码云 注意: 刷新页面后, 如果是只上传了 README 文件,需要执行如下操作:a. $ git add . 添加工程目录下所有文件 ( add 和 “.” 之间有空格)b. $ git commit -m “添加注释信息&quot;c. $ git push -u origin master 推送要上传的文件最后,刷新码云页面,就可以了.12345678910111213141516$ git config user.name #查看用户名$ git config user.email #查看邮箱地址$ git config --global user.name \"x1299906945\" #修改用户名$ git config --global user.email \"hongye.jun@qq.com\" #修改邮箱地址$ mkdir Test1$ cd Test1$ git init$ touch README.md$ git commit -m \"first commit\"$ git remote add origin https://git.oschina.net/x1299906945/Test1.git$ git push -u origin master$ ssh -T git@oschina.net$ git push -u origin master$ git add 使用说明.txt$ git commit -m \"简单测试\"$ git push -u origin master","tags":[{"name":"Git","slug":"Git","permalink":"http://www.hongye567.top/tags/Git/"}]}]