[{"title":"2016结束了","date":"2017-05-09T04:04:41.917Z","path":"2017/05/09/2016结束了/","text":"2016-12-31看到别人写年终小结，觉得这是个不错的习惯，自己也来尝试写下。2016年是我人生的一个过渡点，今年我毕业了，走向了社会。一年来我感觉自己什么也没做，过得特别空虚。尤其是在毕业后工作了，一个人很是孤单，习惯了有同学陪伴的日子。尤其是在节假日，他人都是朋友约会或者成双成对，我却不知道做什么。以前还说自己要活的潇洒自在，还是太天真了，真到自己一个人的时候这种无措。。。别人还去旅游，为什么我学不会，放不下。。。现在才意识到自己多么缺少安全感，好孤单。。。","tags":[{"name":"年终小结","slug":"年终小结","permalink":"http://yoursite.com/tags/年终小结/"}]},{"title":"","date":"2017-05-09T04:04:41.901Z","path":"2017/05/09/React-Native-之搭建开发环境/","text":"搭建开发环境 转自: http://reactnative.cn/docs/0.44/getting-started.html 欢迎使用React Native！这篇文档会帮助你搭建基本的React Native开发环境。如果你已经搭好了环境，那么可以尝试一下编写Hello World。 根据你所使用的操作系统、针对的目标平台不同，具体步骤有所不同。如果想同时开发iOS和Android也没问题，你只需要先选一个平台开始，另一个平台的环境搭建只是稍有不同。 如果阅读完本文档后还碰到很多环境搭建的问题，我们建议你还可以再看看由本站提供的环境搭建视频教程(macOS iOS、macOS Android、windows Android)、windows环境搭建文字教程、以及常见问题。 目标平台： iOS Android 开发平台： macOS Linux Windows 安装必需的软件ChocolateyChocolatey是一个Windows上的包管理器，类似于linux上的yum和 apt-get。 你可以在其官方网站上查看具体的使用说明。一般的安装步骤应该是下面这样： 1@powershell -NoProfile -ExecutionPolicy Bypass -Command &quot;iex ((new-object net.webclient).DownloadString(&apos;https://chocolatey.org/install.ps1&apos;))&quot; &amp;&amp; SET PATH=%PATH%;%ALLUSERSPROFILE%\\chocolatey\\bin 一般来说，使用Chocolatey来安装软件的时候，需要以管理员的身份来运行命令提示符窗口。译注：chocolatey的网站可能在国内访问困难，导致上述安装命令无法正常完成。请使用稳定的翻墙工具。 如果你实在装不上这个工具，也不要紧。下面所需的python2和nodejs你可以分别单独去对应的官方网站下载安装即可。 Python 2打开命令提示符窗口，使用Chocolatey来安装Python 2. 注意目前不支持Python 3版本。 1choco install python2 Node打开命令提示符窗口，使用Chocolatey来安装NodeJS。注意，目前已知Node 7.1版本在windows上无法正常工作，请避开这个版本！ 1choco install nodejs.install 安装完node后建议设置npm镜像以加速后面的过程（或使用科学上网工具）。注意：不要使用cnpm！cnpm安装的模块路径比较奇怪，packager不能正常识别！ 12npm config set registry https://registry.npm.taobao.org --globalnpm config set disturl https://npm.taobao.org/dist --global Yarn、React Native的命令行工具（react-native-cli）Yarn是Facebook提供的替代npm的工具，可以加速node模块的下载。React Native的命令行工具用于执行创建、初始化、更新项目、运行打包服务（packager）等任务。 1npm install -g yarn react-native-cli 安装完yarn后同理也要设置镜像源： 12yarn config set registry https://registry.npm.taobao.org --globalyarn config set disturl https://npm.taobao.org/dist --global 如果你遇到EACCES: permission denied权限错误，可以尝试运行下面的命令（限linux系统）： sudo npm install -g yarn react-native-cli. Android StudioAndroid Studio 2.0 or higher. React Native目前需要Android Studio2.0或更高版本。 Android Studio需要Java Development Kit [JDK] 1.8或更高版本。你可以在命令行中输入javac -version来查看你当前安装的JDK版本。如果版本不合要求，则可以到 官网上下载。 或是使用包管理器来安装（比如choco install jdk8或是apt-get install default-jdk） Android Studio包含了运行和测试React Native应用所需的Android SDK和模拟器。 除非特别注明，请不要改动安装过程中的选项。比如Android Studio默认安装了 Android Support Repository，而这也是React Native必须的（否则在react-native run-android时会报appcompat-v7包找不到的错误）。 确定所有安装都勾选了，尤其是Android SDK和Android Device Emulator。 在初步安装完成后，选择Custom安装项： 检查已安装的组件，尤其是模拟器和HAXM加速驱动。 安装完成后，在Android Studio的欢迎界面中选择Configure | SDK Manager。 在SDK Platforms窗口中，选择Show Package Details，然后在Android 6.0 (Marshmallow)中勾选Google APIs、Android SDK Platform 23、Intel x86 Atom System Image、Intel x86 Atom\\_64 System Image以及Google APIs Intel x86 Atom\\_64 System Image。 在SDK Tools中，选择Show Package Details，然后在Android SDK Build Tools中勾选Android SDK Build-Tools 23.0.1（必须是这个版本）。然后还要勾选最底部的Android Support Repository. ANDROID_HOME环境变量确保ANDROID\\_HOME环境变量正确地指向了你安装的Android SDK的路径。 打开控制面板 -&gt; 系统和安全 -&gt; 系统 -&gt; 高级系统设置 -&gt; 高级 -&gt; 环境变量 -&gt; 新建 具体的路径可能和下图不一致，请自行确认。 你需要关闭现有的命令符提示窗口然后重新打开，这样新的环境变量才能生效。 推荐安装的工具Gradle Daemon开启Gradle Daemon可以极大地提升java代码的增量编译速度。 1(if not exist &quot;%USERPROFILE%/.gradle&quot; mkdir &quot;%USERPROFILE%/.gradle&quot;) &amp;&amp; (echo org.gradle.daemon=true &gt;&gt; &quot;%USERPROFILE%/.gradle/gradle.properties&quot;) 将Android SDK的Tools目录添加到PATH变量中你可以把Android SDK的tools和platform-tools目录添加到PATH变量中，以便在终端中运行一些Android工具，例如android avd或是adb logcat等。 打开控制面板 -&gt; 系统和安全 -&gt; 系统 -&gt; 高级系统设置 -&gt; 高级 -&gt; 环境变量 -&gt; 选中PATH -&gt; 双击进行编辑 注意你的具体路径可能和下图不同 可选的安装项Git你可以使用Chocolatey来安装git: 1choco install git 另外你也可以直接去下载Git for Windows。 在安装过程中注意勾选”Run Git from Windows Command Prompt”，这样才会把git命令添加到PATH环境变量中。 Genymotion比起Android Studio自带的原装模拟器，Genymotion是一个性能更好的选择，但它只对个人用户免费。 下载和安装Genymotion（genymotion需要依赖VirtualBox虚拟机，下载选项中提供了包含VirtualBox和不包含的选项，请按需选择）。 打开Genymotion。如果你还没有安装VirtualBox，则此时会提示你安装。 创建一个新模拟器并启动。 启动React Native应用后，可以按下F1来打开开发者菜单。 Visual Studio Emulator for AndroidVisual Studio Emulator for Android)是利用了Hyper-V技术进行硬件加速的免费android模拟器。也是Android Studio自带的原装模拟器之外的一个很好的选择。而且你并不需要安装Visual Studio。 在用于React Native开发前，需要先在注册表中进行一些修改： 打开运行命令（按下Windows+R键） 输入regedit.exe然后回车 在注册表编辑器中找到HKEY_LOCAL_MACHINE\\SOFTWARE\\Wow6432Node\\Android SDK Tools条目 右键点击Android SDK Tools，选择新建 &gt; 字符串值 名称设为Path 双击Path，将其值设为你的Android SDK的路径。（例如C:\\Program Files\\Android\\sdk） 测试安装123react-native init AwesomeProjectcd AwesomeProjectreact-native run-android 提示：你可以使用--version参数创建指定版本的项目。例如react-native init MyApp --version 0.39.2。注意版本号必须精确到两个小数点。 Windows用户请注意，请不要在命令行默认的System32目录中init项目！会有各种权限限制导致不能运行！ 修改项目现在你已经成功运行了项目，我们可以开始尝试动手改一改了： 使用你喜欢的文本编辑器打开index.android.js并随便改上几行 按两下R键，或是用Menu键（通常是F2，在Genymotion模拟器中是⌘+M）打开开发者菜单，然后选择 Reload JS 就可以看到你的最新修改。 在终端下运行adb logcat *:S ReactNative:V ReactNativeJS:V可以看到你的应用的日志。 完成了！恭喜！你已经成功运行并修改了你的第一个React Native应用。 接下来 如果你想要在真机上运行应用，请参阅在设备上运行。 如果你碰到了一些问题，请参阅常见问题","tags":[]},{"title":"","date":"2017-05-09T04:04:41.901Z","path":"2017/05/09/React-Native-之在设备上运行/","text":"在设备上运行 转自: http://reactnative.cn/docs/0.44/running-on-device-android.html 前提条件：USB调试你需要开启USB调试才能在你的设备上安装你的APP。首先，确定你已经打开设备的USB调试开关 确保你的设备已经成功连接。可以输入adb devices来查看: 1234$ adb devicesList of devices attachedemulator-5554 offline # Google模拟器14ed2fcc device # 真实设备 在右边那列看到device说明你的设备已经被正确连接了。注意，你只应当连接仅仅一个设备。 译注：如果你连接了多个设备（包含模拟器在内），后续的一些操作可能会失败。拔掉不需要的设备，或者关掉模拟器，确保adb devices的输出只有一个是连接状态。 现在你可以运行react-native run-android来在设备上安装并启动应用了。 译注：在真机上运行时可能会遇到白屏的情况，请找到并开启悬浮窗权限。比如miui系统的设置在此处。 提示 你还可以运行react-native run-android --variant=release来安装release版的应用。当然你需要先配置好签名，且此时无法再开启开发者菜单。注意在debug和release版本间来回切换安装时可能会报错签名不匹配，此时需要先卸载前一个版本再尝试安装。 从设备上访问开发服务器。在启用开发服务器的情况下，你可以快速的迭代修改应用，然后在设备上查看结果。按照下面描述的任意一种方法来使你的运行在电脑上的开发服务器可以从设备上访问到。 注意 大部分现代的安卓设备已经没有了硬件”Menu”按键，这是我们用来调出开发者菜单的。在这种情况下你可以通过摇晃设备来打开开发者菜单(重新加载、调试，等等……) (Android 5.0及以上)使用adb reverse命令 注意，这个选项只能在5.0以上版本(API 21+)的安卓设备上使用。 首先把你的设备通过USB数据线连接到电脑上，并开启USB调试（关于如何开启USB调试，参见上面的章节）。 运行adb reverse tcp:8081 tcp:8081 不需要更多配置，你就可以使用Reload JS和其它的开发选项了。 (Android 5.0以下)通过Wi-Fi连接你的本地开发服务器 首先确保你的电脑和手机设备在同一个Wi-Fi环境下。 在设备上运行你的React Native应用。和打开其它App一样操作。 你应该会看到一个“红屏”错误提示。这是正常的，下面的步骤会解决这个报错。 摇晃设备，或者运行adb shell input keyevent 82，可以打开开发者菜单。 点击进入Dev Settings。 点击Debug server host for device。 输入你电脑的IP地址和端口号（譬如10.0.1.1:8081）。在Mac上，你可以在系统设置/网络里找查询你的IP地址。在Windows上，打开命令提示符并输入ipconfig来查询你的IP地址。在Linux上你可以在终端中输入ifconfig来查询你的IP地址。 回到开发者菜单然后选择Reload JS。","tags":[]},{"title":"","date":"2017-05-09T04:04:41.839Z","path":"2017/05/09/MUI返回传参/","text":"##MUI返回传参从a页面跳转到b页面，从b页面返回到a页面时向a页面传递一个参数，a页面接收到参数后做出响应a.html12345678910111213141516171819202122232425262728293031323334353637383940414243444546&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no\" /&gt; &lt;title&gt;&lt;/title&gt; &lt;script src=\"js/mui.min.js\"&gt;&lt;/script&gt; &lt;link href=\"css/mui.min.css\" rel=\"stylesheet\"/&gt; &lt;script type=\"text/javascript\" charset=\"utf-8\"&gt; mui.init(); (function($) &#123; function plusReady() &#123; mui('body').on('tap', '.jump', function() &#123; mui.openWindow(&#123; url: 'b.html', id: 'b' &#125;); &#125;); &#125; // if(window.plus) &#123;// alert(\"准备好了\");// plusReady();// &#125; else &#123;// alert(\"未准备\"); document.addEventListener('plusready', plusReady, false);// &#125; // 返回回来要执行的方法 function backRes(e) &#123; var val = e.detail.inputVal; $('.a1 font')[0].innerHTML = val; &#125; // 自定义窗体事件 doit要和b页面定义的事件一致 window.addEventListener('doit', backRes); &#125;)(mui); &lt;/script&gt;&lt;/head&gt;&lt;body style=\"padding: 15px;line-height: 1.7rem;\"&gt; &lt;a class=\"jump\"&gt;跳转到B页面&lt;/a&gt; &lt;div class=\"a1\"&gt;返回传参为----&lt;font style=\"font-size: 20px;color: #2AC845;\"&gt;&lt;/font&gt;&lt;/div&gt; &lt;div style=\"font-size: 50px;text-align: center;display: block;margin: 50px 0 0 0;\"&gt;a.html页面&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; b.html123456789101112131415161718192021222324252627282930313233343536&lt;!doctype html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;&lt;/title&gt; &lt;meta name=\"viewport\" content=\"width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no\" /&gt; &lt;link href=\"css/mui.min.css\" rel=\"stylesheet\" /&gt; &lt;/head&gt; &lt;body style=\"padding: 15px;line-height: 1.7rem;\"&gt; &lt;input type=\"text\" id=\"text\" /&gt; &lt;a href=\"javascript:void(0)\" class=\"jump\"&gt;返回&lt;/a&gt; &lt;div style=\"font-size: 50px;text-align: center;display: block;margin: 50px 0 0 0;\"&gt;b.html页面&lt;/div&gt; &lt;script src=\"js/mui.min.js\"&gt;&lt;/script&gt; &lt;script type=\"text/javascript\"&gt; mui.init(); (function($) &#123; if(window.plus) &#123; plusReady(); &#125; else &#123; document.addEventListener('plusready', plusReady, false); &#125; function plusReady() &#123; mui('body').on('tap', '.jump', function() &#123; var view = plus.webview.getWebviewById('HBuilder'); // 注意HBuilder是上个页面的ID你自己要替换掉 mui.fire(view, 'doit', &#123; inputVal: $('#text')[0].value &#125;); mui.back(); &#125;); &#125; &#125;)(mui); &lt;/script&gt; &lt;/body&gt;&lt;/html&gt;","tags":[]},{"title":"","date":"2017-05-09T04:04:41.776Z","path":"2017/05/09/Map-集合遍历/","text":"遍历 Map 的四种方法1. 通过 Map.keySet 遍历 key 和 value，二次取值（常用） 123for ( String key : map.keySet() ) &#123; System.out.println( \"key = \" + key +\" and value = \" + map.get( key ) );&#125; 2. 通过 Map.entrySet 使用 iterator 遍历 key 和 value 12345Iterator&lt;Map.Entry&lt;String, String&gt;&gt; it = map.entrySet().iterator();while ( it.hasNext() ) &#123; Map.Entry&lt;String, String&gt; entry = it.next(); System.out.println( \"key = \" + entry.getKey() + \" and value = \" + entry.getValue() );&#125; 3. 通过 Map.entrySet 遍历 key 和 value（推荐，尤其容量大的时候） 123for ( Map.Entry&lt;String, String&gt; entry : map.entrySet() ) &#123; System.out.println( \"key = \" + entry.getKey() + \" and value = \" + entry.getValue() );&#125; 4. 通过 Map.values() 遍历所有的 value，但不能遍历 key 123for ( String v : map.values() ) &#123; System.out.println( \"value = \" + v );&#125;","tags":[]},{"title":"","date":"2017-05-09T04:04:41.761Z","path":"2017/05/09/JS-实现倒计时/","text":"JS 实现倒计时利用 window.setInterval() 实现倒计时示例：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950var id;var interval = 1000; /** * @param year 结束日期的年 * @param month 结束日期的月 * @param day 结束日期的日 * @param divname 需做出响应的元素id */function ShowCountDown(year,month,day,divname) &#123; // 设置结束日期 var endDate = new Date(year, month-1, day); // 获取当前日期 var now = new Date(); // 计算剩余毫秒数 var leftTime=endDate.getTime()-now.getTime(); // 计算剩余秒数 var leftsecond = parseInt(leftTime/1000); // 剩余天数（整数倍） var day1=Math.floor(leftsecond/(60*60*24)); // 剩余小时数（除去大单位后整数倍） var hour=Math.floor((leftsecond-day1*24*60*60)/3600); // 剩余分钟数（除去大单位后整数倍） var minute=Math.floor((leftsecond-day1*24*60*60-hour*3600)/60); // 剩余秒数（除去大单位后整数倍） var second=Math.floor(leftsecond-day1*24*60*60-hour*3600-minute*60); var cc = document.getElementById(divname); cc.innerHTML = \"距离\" + year + \"年\" + month + \"月\" + day + \"日还有：\" + day1 + \"天\" + hour + \"小时\" + minute + \"分\" + second + \"秒\"; &#125; /** * 开始倒计时 */function start()&#123; id = window.setInterval( function() &#123; ShowCountDown(2023,8,7,'divdown1'); &#125;, interval); &#125;/** * 停止倒计时 */function stop()&#123; if (id) &#123; window.clearInterval(id); &#125;&#125; window.setInterval() 注解1. window.setInterval()功能：按照指定的周期（以毫秒计）来调用函数或计算表达式。语法：setInterval(code,millisec)参数：code: 在定时时间到时要执行的JavaScript代码串。millisec: 设定的定时时间，用毫秒数表示。返回值：定时器的ID值，可用于clearInterval()方法停止指定的定时器。注：setInterval()方法会不停地调用函数，直到用clearInterval()终止定时或窗口被关闭。 2. window.clearInterval()功能：取消由 setInterval() 方法设置的定时器。语法：clearInterval(id_of_setinterval)参数：id_of_setinterval: 由 setInterval() 返回的 id 值。该值标识了一个 setInterval 定时器。也就是：window.setInterval() 返回的就是 window.clearInterval() 的参数","tags":[]},{"title":"","date":"2017-05-09T04:04:41.729Z","path":"2017/05/09/Hexo-编译后-JS-混乱解决方案/","text":"###Hexo 编译文档时 JS 混乱解决方案之前为在 GitHub 博客上写自己的 html 网页，在 hexo 根目录下的 source 文件夹中放了自己的 js 文件，每次 hexo g 后，pubic 文件夹中的 js 文件就混乱了，与自己实际 js 不一致。解决方案： hexo g 编译后在 public 文件夹中修改，将自己的 js 文件覆盖 hexo 编译后的 js 文件。或者 hexo d 提交到 GitHub 后直接到 GitHub 线上修改 js 文件。 博客中的 js 引用使用外链的形式。如将 js 文件上传七牛云，引用七牛云上的 js。 跳过 hexo 渲染【推荐】。Hexo 3.0 以下使用：在主目录下添加 README.md 文件或者 html 文件。Hexo 3.0 以上支持：修改 Hexo 主目录下的 _config.yml 配置文件中的 skip_render 参数。 1234567891011skip_render: \"test.html\" // source 文件夹下指定文件skip_render: test/* // 单个文件夹下全部文件skip_render: test/*.md // 单个文件夹下指定类型文件skip_render: test/** // 单个文件夹下全部文件及子文件skip_render: // 多个文件夹以及其他情况 - test/* - test/*.html 注：若修改配置后不见效果，先执行 hexo clean 后再执行 hexo g 重新编译原文&gt;&gt;Hexo 常见问题解决方案","tags":[]},{"title":"","date":"2017-05-09T04:04:41.714Z","path":"2017/05/09/HBuilder-上传图片到七牛云/","text":"HBuilder 上传支持表单上传，所以上传到七牛云的时候用的也是表单上传 12345678910111213141516171819202122232425262728293031323334353637/** * 上传图片到七牛云 * @param String imgPath 图片路径 */function uploadToQiniu(imgPath)&#123; // 七牛云空间域名，修改为自己的 var domain = &quot;http://onpzdyxr0.bkt.clouddn.com/&quot;; // 生成一个随机名字作为上传到七牛云后的文件名 var randName = Math.random().toString(36).substr(2) + imgPath.match(/\\.?[^.\\/]+$/); var task = plus.uploader.createUpload( // 不同的存储空间上传地址可能不一样，运行后根据返回信息做更改 &quot;http://upload.qiniu.com/&quot;, &#123; method: &quot;POST&quot;, blocksize:204800, priority:100 &#125;, function ( t, status ) &#123; // 上传完成 if ( status == 200 ) &#123; console.log( &quot;Upload success: &quot; + t.url ); // 拼接出上传到去七牛云后的图片链接地址 var imgUrl = domain + randName; &#125; else &#123; console.log( &quot;Upload failed: &quot; + status ); &#125; &#125; ); // 添加上传文件，key 值必须是七牛云所需文件对应的 key 值 &quot;file&quot; task.addFile(imgPath,&#123;key: &quot;file&quot;,mime: &quot;image/*&quot;&#125;); // 上传到七牛云后文件的名字 task.addData(&quot;key&quot;,randName); // 七牛云所需 token task.addData(&quot;token&quot;,token); task.start();&#125; 参考资料：七牛云表单上传官方文档 &gt;&gt;HBuilder 上传官方文档 &gt;&gt;","tags":[]},{"title":"","date":"2017-05-09T04:04:41.667Z","path":"2017/05/09/android下载安装APK/","text":"##Android 下载安装APK ###下载安装包未整理完，暂且不写，日后更新 ###安装应用123456789101112131415161718/** * 安装 APK * @param activity * @param fileUri 安装包地址 * fileUri = Uri.parse(\"file://\" + filePath); 或 * fileUri = Uri.fromFile(File file); */ protected void installApk(Activity activity, Uri fileUri) &#123; Intent intent = new Intent(); //执行动作 intent.setAction(Intent.ACTION_VIEW); // 如果不加无法正常显示安装过程和安装成功提示 intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK); //执行的数据类型 intent.setDataAndType(fileUri, \"application/vnd.android.package-archive\"); activity.startActivity(intent); // android.os.Process.killProcess(android.os.Process.myPid()); &#125; demo下载&gt;&gt;","tags":[]},{"title":"","date":"2017-05-09T04:04:41.526Z","path":"2017/05/09/Android-style-样式/","text":"Android style 样式应用学习123456789101112&lt;!--透明状态栏 19及以上--&gt;&lt;item name=\"android:windowTranslucentStatus\"&gt;true&lt;/item&gt;&lt;!--透明导航栏 19及以上--&gt;&lt;item name=\"android:windowTranslucentNavigation\"&gt;true&lt;/item&gt;&lt;!--标题栏颜色--&gt;&lt;item name=\"colorPrimary\"&gt;@color/colorPrimary&lt;/item&gt;&lt;!--状态栏颜色--&gt;&lt;item name=\"colorPrimaryDark\"&gt;@color/colorPrimary&lt;/item&gt;&lt;!--强调色，一些控件和游标的颜色--&gt;&lt;item name=\"colorAccent\"&gt;@color/colorPrimary&lt;/item&gt;&lt;!--是否半透明--&gt;&lt;item name=\"android:windowIsTranslucent\"&gt;true&lt;/item&gt; 应用一：修改状态栏颜色当 values 文件夹和 values-v19 文件夹中存在相同命名的 style，最后会采用最接近设备 API 的版本，如我的手机 API 19，会采用 values-v19 中的样式，而不采用 values 中的样式","tags":[]},{"title":"Hexo 在 GitHub 和 Coding 同时发布","date":"2017-03-04T05:08:58.000Z","path":"2017/03/04/Hexo-在-GitHub-和-Coding-同时发布/","text":"多平台发布在 GitHub 和 Coding 上都有博客，分开一一发布比较麻烦，其实 Hexo 是支持在多个平台发布的。修改 Hexo 主目录下的 _config.yml 配置文件即可 1234567deploy: - type: git repository: https://github.com/Hongye567/Hongye567.github.io.git branch: master - type: git repository: https://git.coding.net/Honye/Honye.git branch: master 免输入密码Hexo 每次提交时都要求输入用户名和密码，尤其在多平台发布时需要多次输入用户名和密码很是麻烦。要求输入密码的原因是我们的仓库地址用的是 HTTPS 不是 SSH。 1. 首先生成 SSH 密钥 1234$ git config --global user.name &quot;yourname&quot; // 配置 git 用户名$ git config --global user.email &quot;youremail@email.com&quot; // 配置 git 邮箱$ cd ~/.ssh // 查看是否已有.ssh文件夹，若有可备份删除$ ssh-keygen -t rsa -C &quot;youremail@email.com&quot; // 生成 SSH 密钥 生成密钥时会提示选择密钥保存路径，直接回车默认路径即可。会提示输入密码和确认密码，直接回车代表不设置密码。 2. 部署公钥在 GitHub 和 Coding 在部署公钥操作基本一样，我不一一赘述，仅以 GitHub 为例。打开 GitHub 项目，选择上方菜单 Settings，接着选择左侧菜单 Deploy keys，接着 Add deploy key，打开前面密钥所在文件夹，将 id_rsa.pub 文件中的内容粘贴在 GitHub 即可。 3. Hexo 提交修改 Hexo 主目录下 _config.yml 配置文件中的参数 1234567deploy: - type: git repository: git@github.com:Hongye567/Hongye567.github.io.git branch: master - type: git repository: git@git.coding.net:Honye/Honye.git branch: master 现在提交就可以不用输入密码了。提交的时候可能会报 authenticity 可靠性问题，直接输入 yes 忽略即可。","tags":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"},{"name":"github","slug":"github","permalink":"http://yoursite.com/tags/github/"},{"name":"coding","slug":"coding","permalink":"http://yoursite.com/tags/coding/"}]},{"title":"hexo 在 coding 上部署博客","date":"2017-03-04T04:11:58.000Z","path":"2017/03/04/hexo-在-coding-上部署博客/","text":"之前是在 GitHub 上部署的静态博客，由于 GitHub 属于国外网站，访问速度慢，听闻可以在 Coding 部署博客，故而转向 Coding。 1. Hexo 环境搭建Hexo 的环境搭建我之前在 GitHub 搭建博客教程中已经说明，不在赘述。也可到 Hexo 官网查看文档。 2. 在 Coding 上新建项目理论上项目名称没要求，但是在我实际操作中出现了引用资源未找到的问题。在引用路径上缺少了一个项目名。所以我的项目名和我的用户名一致，理由是如果项目名和用户名不一致，访问地址必须是 {user_name}.coding.me/{project_name}，如果项目名与用户名一致，可使用 {user_name}.coding.me 直接访问，也避免了上面说的资源引用问题，是我推荐的。若有大神能解决资源引用问题用其他名字也是可行的。项目可私有，不影响访问。选择项目，进入代码页面，选择 Pages 服务，部署来源后即可访问。 3. Hexo Push提交和在 GitHub 大致没什么区别，只需要在 Hexo 主目录的 _config.yml 配置文件中更改下仓库地址即可。 1234deploy: type: git repository: https://git.coding.net/&#123;user_name&#125;/&#123;project_name&#125;.git branch: master 提交玩后就可以访问查看效果了","tags":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"},{"name":"coding","slug":"coding","permalink":"http://yoursite.com/tags/coding/"}]},{"title":"Hexo 编译时 JS 混乱解决方案","date":"2017-03-03T08:00:17.000Z","path":"2017/03/03/Hexo-编译时-JS-混乱解决方案/","text":"之前为在 GitHub 博客上写自己的 html 网页，在 hexo 根目录下的 source 文件夹中放了自己的 js 文件，每次 hexo g 后，pubic 文件夹中的 js 文件就混乱了，与自己实际 js 不一致。 解决方案： hexo g 编译后在 public 文件夹中修改，将自己的 js 文件覆盖 hexo 编译后的 js 文件。或者 hexo d 提交到 GitHub 后直接到 GitHub 线上修改 js 文件。 博客中的 js 引用使用外链的形式。如将 js 文件上传七牛云，引用七牛云上的 js。 跳过 hexo 渲染【推荐】。Hexo 3.0 以下使用：在主目录下添加 README.md 文件或者 html 文件。Hexo 3.0 以上支持：修改 Hexo 主目录下的 _config.yml 配置文件中的 skip_render 参数。 1234567891011skip_render: \"test.html\" # source 文件夹下指定文件skip_render: test/* # 单个文件夹下全部文件skip_render: test/*.md # 单个文件夹下指定类型文件skip_render: test/** # 单个文件夹下全部文件及子文件skip_render: # 多个文件夹以及其他情况 - test/* - test/*.html 注：若修改配置后不见效果，先执行 hexo clean 后再执行 hexo g 重新编译 原文&gt;&gt;Hexo 常见问题解决方案","tags":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"}]},{"title":"利用hexo和github搭建博客（一）","date":"2016-12-16T08:14:25.000Z","path":"2016/12/16/利用hexo和github搭建博客（一）/","text":"在搜素文章时无意间发现一篇很漂亮的博客，一看时个人博客，自己也就想创建一个属于自己的博客，初步完成后就写下此文章便于日后查询。 本文是利用hexo在GitHub上建立的静态博客。主要有三个步骤： 下载和安装所需软件 搭建本地静态博客 将本地博客同步到GitHub上 购买设置专属域名（可选） 搭建环境 node.js git hexo node.js 和 git 我就不多说了，自己在官网按着官方指示一步一步下载安装。我主要来说明下hexo的安装。node.js 和 git 安装完成后，新建一个博客目录，在目录下使用 git bash here （可用命令行）执行1npm install -g hexo 根据网络情况下载，等待安装完成 搭建本地博客cd 到本地博客路径，初始化1hexo init 安装依赖包1npm install 重启后再在博客目录下,生成必要文件和部署12hexo generatehexo deploy 启动 hexo，在本地预览1hexo server 在浏览器输入 http://localhost:4000 预览。若正常显示，则本地博客初始化成功 同步到 GitHub登录 GitHub，没有账号的 Sign up（注册）一个，已有账号的直接登录 Sign in（登录）登陆后点击“+”选择“New repository” Repository name：指定格式：’GitHub用户名’.github.io Description：可选 Public：必须公开 在本地博客目录下有一个_config.yml配置文件，使用编辑器打开，修改Deployment部分：123456# Deployment## Docs: http://hexo.io/docs/deployment.htmldeploy: type: github repository: https://github.com/voidking/voidking.github.io.git branch: master 注意：冒号后面必须跟一个空格，不然会出错再在博客目录下执行如下命令同步到GitHub12hexo generatehexo deploy 若报错 error deployer not found:github 可能是 hexo 更新问题解决方案：将 github 改为 git、将 https 改为 http 后重试123456# Deployment## Docs: http://hexo.io/docs/deployment.htmldeploy: type: git repository: http://github.com/voidking/voidking.github.io.git branch: master 若还是报错，先执行如下指令后重试1npm install hexo-deployer-git --save 在浏览器访问https://‘GitHub用户名’.github.io，若正常显示，则博客已同步到GitHub 至此静态博客就初步搭建完成了！！！","tags":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"},{"name":"github","slug":"github","permalink":"http://yoursite.com/tags/github/"}]},{"title":"Hello World","date":"2016-11-05T01:04:40.621Z","path":"2016/11/05/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]}]