[{"title":"Hexo 在 GitHub 和 Coding 同时发布","date":"2017-03-04T05:08:58.000Z","path":"2017/03/04/Hexo-在-GitHub-和-Coding-同时发布/","text":"多平台发布在 GitHub 和 Coding 上都有博客，分开一一发布比较麻烦，其实 Hexo 是支持在多个平台发布的。修改 Hexo 主目录下的 _config.yml 配置文件即可 1234567deploy: - type: git repository: https://github.com/Hongye567/Hongye567.github.io.git branch: master - type: git repository: https://git.coding.net/Honye/Honye.git branch: master 免输入密码Hexo 每次提交时都要求输入用户名和密码，尤其在多平台发布时需要多次输入用户名和密码很是麻烦。要求输入密码的原因是我们的仓库地址用的是 HTTPS 不是 SSH。1. 首先生成 SSH 密钥 1234$ git config --global user.name &quot;yourname&quot; // 配置 git 用户名$ git config --global user.email &quot;youremail@email.com&quot; // 配置 git 邮箱$ cd ~/.ssh // 查看是否已有.ssh文件夹，若有可备份删除$ ssh-keygen -t rsa -C &quot;youremail@email.com&quot; // 生成 SSH 密钥 生成密钥时会提示选择密钥保存路径，直接回车默认路径即可。会提示输入密码和确认密码，直接回车代表不设置密码。 2. 部署公钥在 GitHub 和 Coding 在部署公钥操作基本一样，我不一一赘述，仅以 GitHub 为例。打开 GitHub 项目，选择上方菜单 Settings，接着选择左侧菜单 Deploy keys，接着 Add deploy key，打开前面密钥所在文件夹，将 id_rsa.pub 文件中的内容粘贴在 GitHub 即可。 3. Hexo 提交修改 Hexo 主目录下 _config.yml 配置文件中的参数 1234567deploy: - type: git repository: git@github.com:Hongye567/Hongye567.github.io.git branch: master - type: git repository: git@git.coding.net:Honye/Honye.git branch: master 现在提交就可以不用输入密码了。提交的时候可能会报 authenticity 可靠性问题，直接输入 yes 忽略即可。","tags":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"},{"name":"github","slug":"github","permalink":"http://yoursite.com/tags/github/"},{"name":"coding","slug":"coding","permalink":"http://yoursite.com/tags/coding/"}]},{"title":"hexo 在 coding 上部署博客","date":"2017-03-04T04:11:58.000Z","path":"2017/03/04/hexo-在-coding-上部署博客/","text":"之前是在 GitHub 上部署的静态博客，由于 GitHub 属于国外网站，访问速度慢，听闻可以在 Coding 部署博客，故而转向 Coding。 1. Hexo 环境搭建Hexo 的环境搭建我之前在 GitHub 搭建博客教程中已经说明，不在赘述。也可到 Hexo 官网查看文档。 2. 在 Coding 上新建项目理论上项目名称没要求，但是在我实际操作中出现了引用资源未找到的问题。在引用路径上缺少了一个项目名。所以我的项目名和我的用户名一致，理由是如果项目名和用户名不一致，访问地址必须是 {user_name}.coding.me/{project_name}，如果项目名与用户名一致，可使用 {user_name}.coding.me 直接访问，也避免了上面说的资源引用问题，是我推荐的。若有大神能解决资源引用问题用其他名字也是可行的。项目可私有，不影响访问。选择项目，进入代码页面，选择 Pages 服务，部署来源后即可访问。 3. Hexo Push提交和在 GitHub 大致没什么区别，只需要在 Hexo 主目录的 _config.yml 配置文件中更改下仓库地址即可。1234deploy: type: git repository: https://git.coding.net/&#123;user_name&#125;/&#123;project_name&#125;.git branch: master 提交玩后就可以访问查看效果了","tags":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"},{"name":"coding","slug":"coding","permalink":"http://yoursite.com/tags/coding/"}]},{"title":"Hexo 编译时 JS 混乱解决方案","date":"2017-03-03T08:00:17.000Z","path":"2017/03/03/Hexo-编译时-JS-混乱解决方案/","text":"之前为在 GitHub 博客上写自己的 html 网页，在 hexo 根目录下的 source 文件夹中放了自己的 js 文件，每次 hexo g 后，pubic 文件夹中的 js 文件就混乱了，与自己实际 js 不一致。 解决方案： hexo g 编译后在 public 文件夹中修改，将自己的 js 文件覆盖 hexo 编译后的 js 文件。或者 hexo d 提交到 GitHub 后直接到 GitHub 线上修改 js 文件。 博客中的 js 引用使用外链的形式。如将 js 文件上传七牛云，引用七牛云上的 js。 跳过 hexo 渲染【推荐】。Hexo 3.0 以下使用：在主目录下添加 README.md 文件或者 html 文件。Hexo 3.0 以上支持：修改 Hexo 主目录下的 _config.yml 配置文件中的 skip_render 参数。 1234567891011skip_render: \"test.html\" # source 文件夹下指定文件skip_render: test/* # 单个文件夹下全部文件skip_render: test/*.md # 单个文件夹下指定类型文件skip_render: test/** # 单个文件夹下全部文件及子文件skip_render: # 多个文件夹以及其他情况 - test/* - test/*.html 注：若修改配置后不见效果，先执行 hexo clean 后再执行 hexo g 重新编译 原文&gt;&gt;Hexo 常见问题解决方案","tags":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"}]},{"title":"利用hexo和github搭建博客（一）","date":"2016-12-16T08:14:25.000Z","path":"2016/12/16/利用hexo和github搭建博客（一）/","text":"在搜素文章时无意间发现一篇很漂亮的博客，一看时个人博客，自己也就想创建一个属于自己的博客，初步完成后就写下此文章便于日后查询。 本文是利用hexo在GitHub上建立的静态博客。主要有三个步骤： 下载和安装所需软件 搭建本地静态博客 将本地博客同步到GitHub上 购买设置专属域名（可选） 搭建环境 node.js git hexo node.js 和 git 我就不多说了，自己在官网按着官方指示一步一步下载安装。我主要来说明下hexo的安装。node.js 和 git 安装完成后，新建一个博客目录，在目录下使用 git bash here （可用命令行）执行1npm install -g hexo 根据网络情况下载，等待安装完成 搭建本地博客cd 到本地博客路径，初始化1hexo init 安装依赖包1npm install 重启后再在博客目录下,生成必要文件和部署12hexo generatehexo deploy 启动 hexo，在本地预览1hexo server 在浏览器输入 http://localhost:4000 预览。若正常显示，则本地博客初始化成功 同步到 GitHub登录 GitHub，没有账号的 Sign up（注册）一个，已有账号的直接登录 Sign in（登录）登陆后点击“+”选择“New repository” Repository name：指定格式：’GitHub用户名’.github.io Description：可选 Public：必须公开 在本地博客目录下有一个_config.yml配置文件，使用编辑器打开，修改Deployment部分：123456# Deployment## Docs: http://hexo.io/docs/deployment.htmldeploy: type: github repository: https://github.com/voidking/voidking.github.io.git branch: master 注意：冒号后面必须跟一个空格，不然会出错再在博客目录下执行如下命令同步到GitHub12hexo generatehexo deploy 若报错 error deployer not found:github 可能是 hexo 更新问题解决方案：将 github 改为 git、将 https 改为 http 后重试123456# Deployment## Docs: http://hexo.io/docs/deployment.htmldeploy: type: git repository: http://github.com/voidking/voidking.github.io.git branch: master 若还是报错，先执行如下指令后重试1npm install hexo-deployer-git --save 在浏览器访问https://‘GitHub用户名’.github.io，若正常显示，则博客已同步到GitHub 至此静态博客就初步搭建完成了！！！","tags":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"},{"name":"github","slug":"github","permalink":"http://yoursite.com/tags/github/"}]},{"title":"Hello World","date":"2016-11-05T01:04:40.621Z","path":"2016/11/05/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/tags/Hexo/"}]}]