{"title":"Postman 使用之 Scripts","slug":"Postman使用之Scripts","date":"2018-11-25T22:02:53.000Z","updated":"2020-12-12T15:48:00.196Z","comments":true,"path":"api/articles/Postman使用之Scripts.json","excerpt":"在我们日常开发中经常需要用到登录授权，大多接口都需要携带 Auth 信息。在 Postman 中调试接口时发送登录请求后再复制粘贴 Token，麻烦。Postman 的 Scripts 功能可以较好的解决这个问题。官文：https://learning.getpostman.com/docs/postman/scripts/intro_to_scripts/","covers":["../images/20181118172735.png","../images/20181118172817.png","../images/20181118172846.png"],"content":"<p>在我们日常开发中经常需要用到登录授权，大多接口都需要携带 Auth 信息。在 Postman 中调试接口时发送登录请求后再复制粘贴 Token，麻烦。Postman 的 Scripts 功能可以较好的解决这个问题。</p>\n<p>官文：<a href=\"https://learning.getpostman.com/docs/postman/scripts/intro_to_scripts/\" target=\"_blank\" rel=\"noopener\">https://learning.getpostman.com/docs/postman/scripts/intro_to_scripts/</a></p>\n<a id=\"more\"></a>\n\n<h2 id=\"Test-scripts\"><a href=\"#Test-scripts\" class=\"headerlink\" title=\"Test scripts\"></a>Test scripts</h2><p>Test scripts 是在请求结束后运行的 JavaScript 脚本。在登录请求结束后将 Token 设置到<a href=\"https://learning.getpostman.com/docs/postman/environments_and_globals/intro_to_environments_and_globals\" target=\"_blank\" rel=\"noopener\">环境变量</a>中，在需要 Auth 的接口中取用变量。</p>\n<h3 id=\"pm-test\"><a href=\"#pm-test\" class=\"headerlink\" title=\"pm.test\"></a>pm.test</h3><p><code>pm.test(testName:String, specFunction:Function):Function</code> 可以用来确认 Response 是否和预期返回的一致。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">param</th>\n<th align=\"left\">description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">testName</td>\n<td align=\"left\">测试名，在 <strong>Test Results</strong> 面板中显示</td>\n</tr>\n<tr>\n<td align=\"left\">specFunction</td>\n<td align=\"left\">测试执行函数</td>\n</tr>\n</tbody></table>\n<p>首先确认 Request 是否请求成功，HTTP 状态码为 200。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pm.test(<span class=\"string\">\"Status code is 200\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    pm.response.to.have.status(<span class=\"number\">200</span>);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>接着判断 Response 是否如期返回 token。如果有返回就设置到环境变量中，如果没有就不管了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pm.test(<span class=\"string\">\"Response has token\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    pm.response.to.have.jsonBody(<span class=\"string\">\"token\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 如果上面断言不通过，下面的语句不会执行</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> token = pm.response.json().token;</span><br><span class=\"line\">    pm.environment.set(<span class=\"string\">\"token\"</span>, token);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>合并。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pm.test(<span class=\"string\">\"Status code is 200\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    pm.response.to.have.status(<span class=\"number\">200</span>);</span><br><span class=\"line\">    pm.test(<span class=\"string\">'Response has token'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        pm.response.to.have.jsonBody(<span class=\"string\">\"token\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> token = pm.response.json().token;</span><br><span class=\"line\">        pm.environment.set(<span class=\"string\">\"token\"</span>, token);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"../images/20181118172735.png\" alt=\"Test Results (1)\"></p>\n<p><img src=\"../images/20181118172817.png\" alt=\"Test Results (2)\"></p>\n<h2 id=\"Variables\"><a href=\"#Variables\" class=\"headerlink\" title=\"Variables\"></a>Variables</h2><p>经过上述的 Test scripts 已经将登录请求得到的 token 设置到了环境变量中。现在在需要验证 Auth 信息的请求中引用变量，以 Authorization为例。</p>\n<p>变量引用有两种方式，一种是通过 <code><span>{</span>{variableName}}</code> 的形式访问，这种形式只能在 Request Builder 中使用，也就是只能在 URL、Params、Authorzation、Headers、Body 中使用，另一种是通过 Scripts 访问，如上述用到的 <code>pm.enviroment.set(variableName:String, variableValue:String)</code>。更多查阅官文：<a href=\"https://learning.getpostman.com/docs/postman/environments_and_globals/variables\" target=\"_blank\" rel=\"noopener\">https://learning.getpostman.com/docs/postman/environments_and_globals/variables</a></p>\n<p>Authorization 🌰：</p>\n<p><img src=\"../images/20181118172846.png\" alt=\"Variables demo\"></p>\n<h2 id=\"More\"><a href=\"#More\" class=\"headerlink\" title=\"More\"></a>More</h2><p>Postman 的功能很强大，灵活应用可以很好提高工作效率和质量。比如灵活使用 <a href=\"https://learning.getpostman.com/docs/postman/environments_and_globals/intro_to_environments_and_globals\" target=\"_blank\" rel=\"noopener\">Environment</a> 可以方便的在测试和生产环境切换，使用 <a href=\"https://learning.getpostman.com/docs/postman/scripts/intro_to_scripts\" target=\"_blank\" rel=\"noopener\">Scripts</a> 可以实现依次发送多个请求，或者 token 失效后自动刷新 token。活学活用查阅官文：<a href=\"https://learning.getpostman.com/docs\" target=\"_blank\" rel=\"noopener\">https://learning.getpostman.com/docs</a></p>\n","more":"<h2 id=\"Test-scripts\"><a href=\"#Test-scripts\" class=\"headerlink\" title=\"Test scripts\"></a>Test scripts</h2><p>Test scripts 是在请求结束后运行的 JavaScript 脚本。在登录请求结束后将 Token 设置到<a href=\"https://learning.getpostman.com/docs/postman/environments_and_globals/intro_to_environments_and_globals\" target=\"_blank\" rel=\"noopener\">环境变量</a>中，在需要 Auth 的接口中取用变量。</p>\n<h3 id=\"pm-test\"><a href=\"#pm-test\" class=\"headerlink\" title=\"pm.test\"></a>pm.test</h3><p><code>pm.test(testName:String, specFunction:Function):Function</code> 可以用来确认 Response 是否和预期返回的一致。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">param</th>\n<th align=\"left\">description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">testName</td>\n<td align=\"left\">测试名，在 <strong>Test Results</strong> 面板中显示</td>\n</tr>\n<tr>\n<td align=\"left\">specFunction</td>\n<td align=\"left\">测试执行函数</td>\n</tr>\n</tbody></table>\n<p>首先确认 Request 是否请求成功，HTTP 状态码为 200。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pm.test(<span class=\"string\">\"Status code is 200\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    pm.response.to.have.status(<span class=\"number\">200</span>);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>接着判断 Response 是否如期返回 token。如果有返回就设置到环境变量中，如果没有就不管了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pm.test(<span class=\"string\">\"Response has token\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    pm.response.to.have.jsonBody(<span class=\"string\">\"token\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 如果上面断言不通过，下面的语句不会执行</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> token = pm.response.json().token;</span><br><span class=\"line\">    pm.environment.set(<span class=\"string\">\"token\"</span>, token);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>合并。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pm.test(<span class=\"string\">\"Status code is 200\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    pm.response.to.have.status(<span class=\"number\">200</span>);</span><br><span class=\"line\">    pm.test(<span class=\"string\">'Response has token'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        pm.response.to.have.jsonBody(<span class=\"string\">\"token\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> token = pm.response.json().token;</span><br><span class=\"line\">        pm.environment.set(<span class=\"string\">\"token\"</span>, token);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"../images/20181118172735.png\" alt=\"Test Results (1)\"></p>\n<p><img src=\"../images/20181118172817.png\" alt=\"Test Results (2)\"></p>\n<h2 id=\"Variables\"><a href=\"#Variables\" class=\"headerlink\" title=\"Variables\"></a>Variables</h2><p>经过上述的 Test scripts 已经将登录请求得到的 token 设置到了环境变量中。现在在需要验证 Auth 信息的请求中引用变量，以 Authorization为例。</p>\n<p>变量引用有两种方式，一种是通过 <code><span>{</span>{variableName}}</code> 的形式访问，这种形式只能在 Request Builder 中使用，也就是只能在 URL、Params、Authorzation、Headers、Body 中使用，另一种是通过 Scripts 访问，如上述用到的 <code>pm.enviroment.set(variableName:String, variableValue:String)</code>。更多查阅官文：<a href=\"https://learning.getpostman.com/docs/postman/environments_and_globals/variables\" target=\"_blank\" rel=\"noopener\">https://learning.getpostman.com/docs/postman/environments_and_globals/variables</a></p>\n<p>Authorization 🌰：</p>\n<p><img src=\"../images/20181118172846.png\" alt=\"Variables demo\"></p>\n<h2 id=\"More\"><a href=\"#More\" class=\"headerlink\" title=\"More\"></a>More</h2><p>Postman 的功能很强大，灵活应用可以很好提高工作效率和质量。比如灵活使用 <a href=\"https://learning.getpostman.com/docs/postman/environments_and_globals/intro_to_environments_and_globals\" target=\"_blank\" rel=\"noopener\">Environment</a> 可以方便的在测试和生产环境切换，使用 <a href=\"https://learning.getpostman.com/docs/postman/scripts/intro_to_scripts\" target=\"_blank\" rel=\"noopener\">Scripts</a> 可以实现依次发送多个请求，或者 token 失效后自动刷新 token。活学活用查阅官文：<a href=\"https://learning.getpostman.com/docs\" target=\"_blank\" rel=\"noopener\">https://learning.getpostman.com/docs</a></p>","categories":[],"tags":[]}